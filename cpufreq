#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/cpufreq
#----------------------------------------------------------------------------------
# Project Name      - PerlProjects/cpufreq
# Started On        - Sat  4 May 15:51:08 BST 2019
# Last Change       - Thu  2 Jan 23:06:38 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

use v5.22.1;
use strict;
use warnings;
use autodie;
use File::Basename 'basename';
use TFL 'Err'; # <-- libtfl-perl (>= 2020-01-02)

no warnings 'uninitialized';

my $CurVer = "2020-01-02";
my $Progrm = basename($0);

sub Usage{
	my $Info = qq{            @{[uc($Progrm)]} ($CurVer)
		            Written by terminalforlife <terminalforlife\@yahoo.com>

		            Simple Perl tool to display the current CPU core frequencies.

		SYNTAX:     $Progrm [OPTS]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
	};

	print($Info =~ tr/\t//dr)
}

while (scalar(@ARGV) > 0){
	my $Arg = $ARGV[0];

	if ($Arg =~ '^(--help|-h|-\?)$'){
		Usage(1); exit(0)
	}elsif ($Arg =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit(0)
	}else{
		Err(1, "Incorrect argument(s) specified")
	}

	shift(@ARGV)
}

my $ProcFile = '/proc/cpuinfo';

Err(1, "File '$ProcFile' not found.") unless -f $ProcFile;
Err(1, "Read access for '$ProcFile' is denied.") unless -r $ProcFile;

open(my $FH, '<', $ProcFile);

my $CoreCount = 0;
while (<$FH>){
	chomp(my @CurLine = split(':', $_));
	next unless $CurLine[0] =~ '^cpu MHz';

	$CoreCount++;
	printf("CORE_%d: %.3f\n", $CoreCount, $CurLine[1] =~ s/\s//gr)
}

close($FH)
