#!/usr/bin/perl

#----------------------------------------------------------------------------------
# Project Name      - perlmisc/previewer
# Started On        - Mon 22 Apr 01:30:36 BST 2019
# Last Change       - Wed  8 May 08:27:27 BST 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use Text::Wrap;
use LWP::UserAgent;
use Term::ReadKey 'GetTerminalSize';
use TFL; # <-- libTFL-perl (>= 2019-05-07)

my $_VERSION_ = "2019-05-08";

my $DB_SITE = 'https://community.linuxmint.com/data/reviews.list';

sub USAGE{
	my $HELP = qq{	            PREVIEWER ($_VERSION_)
		            Written by terminalforlife (terminalforlife\@yahoo.com)

		            Perl program to pretty-print Linux Mint package reviews.

		SYNTAX:     previewer [OPTS] [PACKAGE] [RATING]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --summary|-S            - Conclude the reviews with a summary.
		            --user|-u NAME          - Only show review(s) by NAME user.
		            --show-all|-a           - Show all reviews, regardless of rating.
		            --boring|-b             - Omit these ASCII psuedo-borders.
		            --no-reviews            - Omit the review text from the output.
		            --raw-output            - Display as it is in the database.
		            --db-update             - Download and update the database.
		            --db-file PATH          - Instead, use this database file.

		NOTE:       Although previewer uses Linux Mint's review and rating database, it can
		            still prove useful in Debian, Ubuntu, and their other derivatives, -
		            albeit with inaccuracies.

		            If you specifiy your own database file, it MUST adhere to the same
		            formatting as the official one, lest previewer wind up a buggy mess.

		            For example:

		              PKG~~~ID~~~USER~~~RATING~~~REVIEW

		            Each field must be separated by three tildes, without any quotes.

		            An exit status of 2 will be given, if no reviews are found.

		            Previewer is a Perl fork of and vast improvement over the original -
		            shell program, 'reviewer', written also by 'terminalforlife'.

		EXAMPLE:    previewer -b -a --summary firefox
		            previewer --no-reviews -S vim 2
		            previewer --user 'Velimor' mintstick 4

		FILE:       Unless told otherwise, the database is stored here:

		              \$HOME/.config/reviewer.db

		SITE:       $DB_SITE
	};

	print($HELP =~ tr/\t//dr)
}

my $IFUSER = '';
my $ARGLESS = 0;
my $BORING = 0;
my $SHOW_ALL = 0;
my $UPDATE_DB = 0;
my $SHOW_STATS = 0;
my $NO_REVIEWS = 0;
my $RAW_OUTPUT = 0;
my $P1 = '+'; my $P2 = '|';
my $DATABASE = "$ENV{HOME}/.config/reviewer.db";

while($ARGV[0]){
	if($ARGV[0] =~ /^(--help|-h|-\?)$/){
		USAGE;
		exit 0
	}elsif($ARGV[0] =~ /^(--version|-v)$/){
		print("$_VERSION_\n");
		exit 0
	}elsif($ARGV[0] =~ /^(--summary|-S)$/){
		$SHOW_STATS = 1
	}elsif($ARGV[0] =~ /^(--show-all|-a)$/){
		$SHOW_ALL = 1
	}elsif($ARGV[0] =~ /^--db-update$/){
		$UPDATE_DB = 1
	}elsif($ARGV[0] =~ /^--db-file$/){
		shift(@ARGV);

		TFL::FAIL(1, __LINE__, "No database file specified.")
			if not $ARGV[0];

		$DATABASE = $ARGV[0]
	}elsif($ARGV[0] =~ /^(--user|-u)$/){
		shift(@ARGV);

		TFL::FAIL(1, __LINE__, "No user specified.") if not $ARGV[0];
		$IFUSER = $ARGV[0]
	}elsif($ARGV[0] =~ /^(--boring|-b)$/){
		$BORING = 1
	}elsif($ARGV[0] =~ /^--no-reviews$/){
		$NO_REVIEWS = 1
	}elsif($ARGV[0] =~ /^--raw-output$/){
		$RAW_OUTPUT = 1
	}elsif($ARGV[0] =~ /^-.*/){
		TFL::FAIL(1, __LINE__, "Incorrect argument(s) specified.")
	}else{
		last
	}

	shift(@ARGV)
}

if(not defined($ARGV[0]) and not defined($ARGV[1])){$ARGLESS = 1}

unless($UPDATE_DB or $IFUSER or ($SHOW_ALL and $ARGLESS)){
	if($SHOW_ALL and not defined($ARGV[0])){
		TFL::FAIL(1, __LINE__, "Missing package name.")
	}

	if($ARGV[1]){
		if($SHOW_ALL and $ARGV[1] !~ /^[1-5]{1}$/){
			TFL::FAIL(1, __LINE__, "Invalid rating provided.")
		}elsif($SHOW_ALL){
			TFL::FAIL(1, __LINE__, "Told to show all, but provided a rating.")
		}
	}else{
		unless($SHOW_ALL){
			TFL::FAIL(1, __LINE__, "A rating is by default required.")
		}
	}
}

if(not(-f $DATABASE and -r $DATABASE) and $UPDATE_DB){
	TFL::FAIL(1, __LINE__, "Database file missing or inaccessible.")
}elsif(-z $DATABASE and $UPDATE_DB){
	TFL::FAIL(1, __LINE__, "Database file is empty.")
}elsif($UPDATE_DB){
	open(my $FH, '>', $DATABASE);

	my $UA = LWP::UserAgent->new();
	$UA->agent('Mozilla/5.0');
	my $BUFFER = $UA->get($DB_SITE)->decoded_content;
	print($FH $BUFFER);

	close($FH);

	exit 0
}

$Text::Wrap::columns = @{[GetTerminalSize]}[0];

open(my $FH, '<', $DATABASE);
my @FILE_DATA = <$FH>;
close($FH);

my %STARS; # <-- Hash of each rating, for later incrementing, set below.
$STARS{$_} = 0 foreach 1..5;
my $TTL_COUNT = 0; # <-- TTL comments by user, or for a package.
my $COUNT = 0; # <-- TTL comments displayed by user, or for a package.

sub INC_VARS{ # <-- $RATE is passed here.
	foreach(1..5){$STARS{$_}++ if $_[0] == $_}
}

sub SHOW{ # <-- Arguments are typically $SAID, $RATE, then $USER.
	if($RAW_OUTPUT){
		if(not $NO_REVIEWS){
			print($_);
		}else{
			my @TEMP = split('~~~', $_);
			print("$TEMP[0]~~~$TEMP[1]~~~$TEMP[2]~~~$TEMP[3]~~~\n");
		}

		return 0
	}

	if($NO_REVIEWS){
		printf("%d/5 ('%s')\n", $_[1], $_[2])
	}else{
		printf(
			"%d/5 ('%s')\n $P1\n%s $P1\n",
			$_[1], $_[2], wrap(" $P2 ", " $P2 ", $_[0])
		)
	}
}

if($BORING){$P1 = ' '; $P2 = ' '}

my $PACK_OLD;
foreach(@FILE_DATA){
	my @LINE = split("~~~", $_);

	my $PACK = $LINE[0];
	my $RATE = $LINE[3];
	my $SAID = $LINE[4];
	my $USER = $LINE[2];

	if(length($IFUSER) > 0){ # <-- Go by users.
		if(not $ARGV[0]){
			if($IFUSER eq $USER){
				$COUNT++;
				$TTL_COUNT++;
				INC_VARS($RATE);
				print("\n > '$PACK'\n\n");
				SHOW($SAID, $RATE, $USER);
			}
		}elsif($PACK eq $ARGV[0]){
			if($IFUSER eq $USER){
				$COUNT++;
				$TTL_COUNT++;
				INC_VARS($RATE);
				SHOW($SAID, $RATE, $USER);
			}
		}
	}elsif($ARGV[0]){ # <-- Go by packages.
		if($PACK eq $ARGV[0]){
			$TTL_COUNT++;
			INC_VARS($RATE);

			if($SHOW_ALL){
				$COUNT++;
				SHOW($SAID, $RATE, $USER)
			}elsif(($ARGV[1]) and ($RATE == $ARGV[1])){
				$COUNT++;
				SHOW($SAID, $RATE, $USER)
			}
		}
	}elsif($SHOW_ALL and $ARGLESS){ # <-- Just show all reviews.
		$COUNT++;
		$TTL_COUNT++;
		INC_VARS($RATE);

		# Ensure print isn't unnecessarily repeated.
		if($PACK_OLD and $PACK_OLD ne $PACK){
			print("\n > '$PACK'\n\n");
		}elsif(not $PACK_OLD){
			print("\n > '$PACK'\n\n");
		}

		# When these aren't the same, next time, show what it is.
		$PACK_OLD = $PACK;

		SHOW($SAID, $RATE, $USER)
	}
}

if($COUNT == 0){
	print("Uh-oh! ...no reviews were found.\n");
	exit(2)
}

if($SHOW_STATS){
	sub SHOW2{
		my $BUF = qq{
			 $_[1]$_[2]
			 $_[0] Reviews:     $COUNT/$TTL_COUNT
			 $_[0]
			 $_[0] Total 5/5:   $STARS{5}
			 $_[0] Total 4/5:   $STARS{4}
			 $_[0] Total 3/5:   $STARS{3}
			 $_[0] Total 2/5:   $STARS{2}
			 $_[0] Total 1/5:   $STARS{1}
			 $_[1]$_[2]
		};

		print($BUF =~ tr/\t//dr)
	}

	$BORING ? SHOW2(' ', ' ', ' ') : SHOW2('|', '+', '>')
}
