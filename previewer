#!/usr/bin/perl

#----------------------------------------------------------------------------------
# Project Name      - perlmisc/previewer.pl
# Started On        - Mon 22 Apr 01:30:36 BST 2019
# Last Change       - Mon 22 Apr 16:54:47 BST 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Perl rewrite (almost) of the reviewer shell program. Faster and more efficient.
#----------------------------------------------------------------------------------

use strict;
use warnings;
use Text::Wrap;

my $_VERSION_ = "2019-04-22";

sub XERR{ printf("[L%0.4d] ERROR: %s\n", $_[0], "$_[1]"); exit 1; }
sub ERR{ printf("[L%0.4d] ERROR: %s\n", "$1", "$2"); }

my $DB_SITE = 'https://community.linuxmint.com/data/new-reviews.list';

sub USAGE{
	my $HELP = qq{	            PREVIEWER ($_VERSION_)
		            Written by terminalforlife (terminalforlife\@yahoo.com)

		            Perl fork of the slower, shell counterpart, 'reviewer'.

		SYNTAX:     previewer [OPTS] PACKAGE RATING

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --summary|-S            - Conclude the reviews with a summary.
		            --db-update             - Download and update the database.

		NOTE:       Although previewer uses Linux Mint's review and rating database, it can
		            still prove useful in Debian and Ubuntu, albeit with inaccuracies.

		FILE:       The database file used is:

		              \$HOME/.config/reviewer.db

		SITE:       $DB_SITE
	};

	print(split("\t", $HELP))
}

my $SHOW_STATS = "False";
my $UPDATE_DB = "False";

if(@ARGV){
	while($ARGV[0]){
		if($ARGV[0] =~ /^(--help|-h|-\?)$/){
			USAGE;
			exit 0
		}elsif($ARGV[0] =~ /^(--version|-v)$/){
			print("$_VERSION_\n");
			exit 0
		}elsif($ARGV[0] =~ /^(--summary|-S)$/){
			$SHOW_STATS = "True"
		}elsif($ARGV[0] =~ /^--db-update$/){
			$UPDATE_DB = "True"
		}elsif($ARGV[0] =~ /^-.*/){
			XERR(__LINE__, "Incorrect argument(s) specified.")
		}else{
			last
		}

		shift(@ARGV)
	}

	unless($UPDATE_DB eq "True"){
		if(! $ARGV[0]){
			XERR(__LINE__, "A package name must be provided.")
		}elsif((! $ARGV[1]) || ($ARGV[1] !~ /^[1-5]{1}$/)){
			XERR(__LINE__, "Invalid or unspecified rating.")
		}
	}
}else{
	XERR(__LINE__, "One or more arguments are required.")
}

if(! -x "/usr/bin/tput"){
	XERR(__LINE__, "Dependency '/usr/bin/tput' not met.")
}

my $DATABASE = "$ENV{HOME}/.config/reviewer.db";
if(!(-f $DATABASE && -r $DATABASE) && ($UPDATE_DB eq "False")){
	XERR(__LINE__, "File '$DATABASE' not found.")
}elsif($UPDATE_DB eq "True"){
	# Temporary.
	if(! -x "/usr/bin/wget"){
		XERR(__LINE__, "Dependency '/usr/bin/wget' not met.")
	}else{
		system("/usr/bin/wget -q '$DB_SITE' -O '$DATABASE'");
		exit 0
	}
}

$Text::Wrap::columns = `/usr/bin/tput cols`;

open(my $FH, '<', $DATABASE);

my $STAR1_COUNT = 0;
my $STAR2_COUNT = 0;
my $STAR3_COUNT = 0;
my $STAR4_COUNT = 0;
my $STAR5_COUNT = 0;
my $TTL_COUNT = 0;
my $COUNT = 0;
while(<$FH>){
	my @LINE = split("~~~", $_);

	my $PACK = $LINE[0];
	my $RATE = $LINE[3];
	my $SAID = $LINE[4];
	my $USER = $LINE[2];

	if($PACK eq $ARGV[0]){
		$TTL_COUNT += 1;

		my @DATA = ($RATE, $SAID, $USER);
		if($DATA[0] == 1){$STAR1_COUNT += 1}
		if($DATA[0] == 2){$STAR2_COUNT += 1}
		if($DATA[0] == 3){$STAR3_COUNT += 1}
		if($DATA[0] == 4){$STAR4_COUNT += 1}
		if($DATA[0] == 5){$STAR5_COUNT += 1}

		if($DATA[0] == $ARGV[1]){
			$COUNT++;

			printf(
				"%d/5 ('%s')\n -\n%s -\n",
				$DATA[0], $DATA[2],
				wrap(" | ", " | ", $DATA[1])
			)
		}
	}
}

close($FH);

if($SHOW_STATS eq "True"){
	print("\n   +----------/");
	printf("\n   | Reviews:     %d/%d\n   |", $COUNT, $TTL_COUNT);
	printf("\n   | Total 5/5:   %d", $STAR5_COUNT);
	printf("\n   | Total 4/5:   %d", $STAR4_COUNT);
	printf("\n   | Total 3/5:   %d", $STAR3_COUNT);
	printf("\n   | Total 2/5:   %d", $STAR2_COUNT);
	printf("\n   | Total 1/5:   %d\n", $STAR1_COUNT);
	print("   +----------------------/\n\n");
}
