#!/usr/bin/env perl

#----------------------------------------------------------------------------------
# Project Name      - PerlProjects/previewer
# Started On        - Mon 22 Apr 01:30:36 BST 2019
# Last Change       - Sat 14 Dec 18:47:27 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Package 'libanyevent-i3-perl' seems to be needed, for some reason.
#----------------------------------------------------------------------------------

use v5.22.1;
use strict;
use warnings;
use autodie;
use File::Basename 'basename';
use Text::Wrap;
use LWP::UserAgent;
use Term::ReadKey 'GetTerminalSize'; # <-- libterm-readkey-perl (>= 2.33-1build1)
use TFL; # <-- libTFL-perl (>= 2019-05-07)

my $CurVer = "2019-12-14";
my $Progrm = basename($0);

my $DBSite = 'https://community.linuxmint.com/data/reviews.list';

sub Usage{
	my $Help = qq{	            @{[uc($Progrm)]} ($CurVer)
		            Written by terminalforlife <terminalforlife\@yahoo.com>

		            Perl program to pretty-print Linux Mint package reviews.

		SYNTAX:     $Progrm [OPTS] [PACKAGE] [RATING]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --summary|-S            - Conclude the reviews with a summary.
		            --user|-u NAME          - Only show review(s) by NAME user.
		            --show-all|-a           - Show all reviews, regardless of rating.
		            --boring|-b             - Omit these ASCII psuedo-borders.
		            --no-reviews            - Omit the review text from the output.
		            --raw-output            - Display as it is in the database.
		            --db-update             - Download and update the database.
		            --db-file PATH          - Instead, use this database file.

		NOTE:       Although $Progrm uses Linux Mint's review and rating database, it can
		            still prove useful in Debian, Ubuntu, and their other derivatives, -
		            albeit with inaccuracies.

		            If you specifiy your own database file, it MUST adhere to the same
		            formatting as the official one, lest $Progrm wind up a buggy mess.

		            For example:

		              PKG~~~ID~~~USER~~~RATING~~~REVIEW

		            Each field must be separated by three tildes, without any quotes.

		            An exit status of 2 will be given, if no reviews are found.

		            Previewer is a Perl fork of and vast improvement over the original -
		            shell program, 'reviewer', written also by 'terminalforlife'.

		EXAMPLE:    $Progrm -b -a --summary firefox
		            $Progrm --no-reviews -S vim 2
		            $Progrm --user 'Velimor' mintstick 4

		FILE:       Unless told otherwise, the database is stored here:

		              \$HOME/.config/reviewer.db

		SITE:       $DBSite
	};

	print($Help =~ tr/\t//dr)
}

my $IfUser = '';
my $Argless = 0;
my $BeBoring = 0;
my $ShowAll = 0;
my $UpdateDB = 0;
my $ShowStats = 0;
my $NoReviews = 0;
my $DoRaw = 0;
my $P1 = '+'; my $P2 = '|';
my $Database = "$ENV{HOME}/.config/reviewer.db";

while($ARGV[0]){
	if($ARGV[0] =~ /^(--help|-h|-\?)$/){
		Usage;
		exit 0
	}elsif($ARGV[0] =~ /^(--version|-v)$/){
		print("$CurVer\n");
		exit 0
	}elsif($ARGV[0] =~ /^(--summary|-S)$/){
		$ShowStats = 1
	}elsif($ARGV[0] =~ /^(--show-all|-a)$/){
		$ShowAll = 1
	}elsif($ARGV[0] =~ /^--db-update$/){
		$UpdateDB = 1
	}elsif($ARGV[0] =~ /^--db-file$/){
		shift(@ARGV);

		TFL::FAIL(1, __LINE__, "No database file specified.")
			if not $ARGV[0];

		$Database = $ARGV[0]
	}elsif($ARGV[0] =~ /^(--user|-u)$/){
		shift(@ARGV);

		TFL::FAIL(1, __LINE__, "No user specified.") if not $ARGV[0];
		$IfUser = $ARGV[0]
	}elsif($ARGV[0] =~ /^(--boring|-b)$/){
		$BeBoring = 1
	}elsif($ARGV[0] =~ /^--no-reviews$/){
		$NoReviews = 1
	}elsif($ARGV[0] =~ /^--raw-output$/){
		$DoRaw = 1
	}elsif($ARGV[0] =~ /^-.*/){
		TFL::FAIL(1, __LINE__, "Incorrect argument(s) specified.")
	}else{
		last
	}

	shift(@ARGV)
}

if(not defined($ARGV[0]) and not defined($ARGV[1])){$Argless = 1}

unless($UpdateDB or $IfUser or ($ShowAll and $Argless)){
	if($ShowAll and not length($ARGV[0]) == 0){
		TFL::FAIL(1, __LINE__, "Missing package name.")
	}

	if($ARGV[1]){
		if($ShowAll and $ARGV[1] !~ /^[1-5]{1}$/){
			TFL::FAIL(1, __LINE__, "Invalid rating provided.")
		}elsif($ShowAll){
			TFL::FAIL(1, __LINE__, "Told to show all, but provided a rating.")
		}
	}else{
		unless($ShowAll){
			TFL::FAIL(1, __LINE__, "A rating is by default required.")
		}
	}
}

if($UpdateDB){
	open(my $FH, '>', $Database);

	my $UA = LWP::UserAgent->new();
	$UA->agent('Mozilla/5.0');
	my $BufferFER = $UA->get($DBSite)->decoded_content;
	print($FH $BufferFER);

	close($FH);

	exit 0
}

$Text::Wrap::columns = @{[GetTerminalSize]}[0];

if(not -f $Database){
	TFL::FAIL(1, __LINE__, "Database missing -- have you used '--db-update' yet?")
}

open(my $FH, '<', $Database);
my @FILE_DATA = <$FH>;
close($FH);

my %Ratings; # <-- Hash of each rating, for later incrementing, set below.
$Ratings{$_} = 0 foreach 1..5;
my $TotalCount = 0; # <-- TTL comments by user, or for a package.
my $Count = 0; # <-- TTL comments displayed by user, or for a package.

sub INC_VARS{ # <-- $Rate is passed here.
	foreach(1..5){$Ratings{$_}++ if $_[0] == $_}
}

sub Format{ # <-- Arguments are typically $Said, $Rate, then $User.
	if($DoRaw){
		if(not $NoReviews){
			print($_);
		}else{
			my @TEMP = split('~~~', $_);
			print("$TEMP[0]~~~$TEMP[1]~~~$TEMP[2]~~~$TEMP[3]~~~\n");
		}

		return 0
	}

	if($NoReviews){
		printf("%d/5 ('%s')\n", $_[1], $_[2])
	}else{
		printf(
			"%d/5 ('%s')\n $P1\n%s $P1\n",
			$_[1], $_[2], wrap(" $P2 ", " $P2 ", $_[0])
		)
	}
}

if($BeBoring){$P1 = ' '; $P2 = ' '}

my $PackOld;
foreach(@FILE_DATA){
	my @CurLine = split("~~~", $_);

	my $Pack = $CurLine[0];
	my $Rate = $CurLine[3];
	my $Said = $CurLine[4];
	my $User = $CurLine[2];

	if(length($IfUser) > 0){ # <-- Go by users.
		if(not $ARGV[0]){
			if($IfUser eq $User){
				$Count++;
				$TotalCount++;
				INC_VARS($Rate);
				print("\n > '$Pack'\n\n");
				Format($Said, $Rate, $User);
			}
		}elsif($Pack eq $ARGV[0]){
			if($IfUser eq $User){
				$Count++;
				$TotalCount++;
				INC_VARS($Rate);
				Format($Said, $Rate, $User);
			}
		}
	}elsif($ARGV[0]){ # <-- Go by packages.
		if($Pack eq $ARGV[0]){
			$TotalCount++;
			INC_VARS($Rate);

			if($ShowAll){
				$Count++;
				Format($Said, $Rate, $User)
			}elsif(($ARGV[1]) and ($Rate == $ARGV[1])){
				$Count++;
				Format($Said, $Rate, $User)
			}
		}
	}elsif($ShowAll and $Argless){ # <-- Just show all reviews.
		$Count++;
		$TotalCount++;
		INC_VARS($Rate);

		# Ensure print isn't unnecessarily repeated.
		if($PackOld and $PackOld ne $Pack){
			print("\n > '$Pack'\n\n");
		}elsif(not $PackOld){
			print("\n > '$Pack'\n\n");
		}

		# When these aren't the same, next time, show what it is.
		$PackOld = $Pack;

		Format($Said, $Rate, $User)
	}
}

if($Count == 0){
	print(STDERR "Uh-oh! ...no reviews were found.\n");
	exit(2)
}

if($ShowStats){
	sub Display{
		my $Buffer = qq{
			 $_[1]$_[2]
			 $_[0] Reviews:     $Count/$TotalCount
			 $_[0]
			 $_[0] Total 5/5:   $Ratings{5}
			 $_[0] Total 4/5:   $Ratings{4}
			 $_[0] Total 3/5:   $Ratings{3}
			 $_[0] Total 2/5:   $Ratings{2}
			 $_[0] Total 1/5:   $Ratings{1}
			 $_[1]$_[2]
		};

		print($Buffer =~ tr/\t//dr)
	}

	$BeBoring ? Display(' ', ' ', ' ') : Display('|', '+', '>')
}
