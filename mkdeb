#!/usr/bin/perl

#----------------------------------------------------------------------------------
# Project Name      - perlmisc/mkdeb
# Started On        - Wed  1 May 23:27:08 BST 2019
# Last Change       - Tue  7 May 20:25:40 BST 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# WARNING: Experimental work-in-progress. USE AT YOUR OWN RISK.
#
# Even when/if this is finished, it's going to be more for personal use, unless it
# evolves into something more. I plan to build a lot of DEB packages, hence this.
#----------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use File::Copy 'copy';
use File::Path 'make_path';
use TFL;

my $_VERSION_ = "2019-05-07";

sub USAGE{
	my $INFO = qq{            MKDEB ($_VERSION_)
		            Written by terminalforlife (terminalforlife\@yahoo.com)

		            ...

		SYNTAX:     mkdeb [OPTS] KEY=VALUE . . .

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.

		CMDS:       BASE=PATH               - Directory in which package files will live.
		            NAME=STRING             - The name of the project to be packaged.

		NOTE:       All CMDS are written in key=value format.
	};

	print($INFO =~ tr/\t//dr)
}

while(defined($ARGV[0])){
	if($ARGV[0] =~ /^(--help|-h|-\?)$/){
		USAGE;
		exit 0
	}elsif($ARGV[0] =~ /^(--version|-v)$/){
		print("$_VERSION_\n");
		exit 0
	}elsif($ARGV[0] =~ /^-.*/){
		TFL::FAIL(1, __LINE__, "Incorrect argument(s) specified")
	}else{
		last
	}

	shift(@ARGV)
}

TFL::DepChk('/usr/bin/dpkg-deb', 1, __LINE__);

my @KEY_LIST = (
	'BASE', 'NAME', 'VERS', 'SECT', 'ESSE', 'DEPS',
	'SIZE', 'SHDE', 'LODE', 'PRIO', 'ARCH', 'REPO'
);

my %KEYS;
while($ARGV[0]){
	foreach(@KEY_LIST){
		if(uc(TFL::KeyVal($ARGV[0], 0)) eq $_){
			$KEYS{$_} = TFL::KeyVal($ARGV[0], 1)
		}
	}

	shift(@ARGV)
}

TFL::Defined(\%KEYS, \@KEY_LIST);

my $DEBIAN = $KEYS{BASE} =~ s/\/$//r . '/DEBIAN';
if(-d $KEYS{BASE}){
	TFL::FAIL(0, __LINE__, "Directory for 'BASE' already exists.")
}else{
	make_path($DEBIAN)
}

sub MkCtrl{
	open(my $FH, '>', "$DEBIAN/control");

	my $DATA = qq{Package: $KEYS{NAME}
		Version: $KEYS{VERS}
		Architecture: $KEYS{ARCH}
		Essential: $KEYS{ESSE}
		Section: $KEYS{SECT}
		Priority: $KEYS{PRIO}
		Depends: $KEYS{DEPS}
		Maintainer: $_[1]
		Installed-Size: $KEYS{SIZE}
		Description: $KEYS{SHDE}
		  $KEYS{LODE}
		Homepage: https://github.com/$_[0]/$KEYS{REPO}
	};

	print($FH $DATA =~ tr/\t//dr);

	close($FH)
}

MkCtrl('terminalforlife', 'TFL/LL <terminalforlife@yahoo.com>')
