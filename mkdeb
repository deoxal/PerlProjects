#!/usr/bin/perl

#----------------------------------------------------------------------------------
# Project Name      - perlmisc/mkdeb
# Started On        - Wed  1 May 23:27:08 BST 2019
# Last Change       - Tue  7 May 17:30:01 BST 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# WARNING: Experimental work-in-progress. USE AT YOUR OWN RISK.
#
# Even when/if this is finished, it's going to be more for personal use, unless it
# evolves into something more. I plan to build a lot of DEB packages, hence this.
#----------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use File::Copy 'copy';
use File::Path 'make_path';
use TFL;

my $_VERSION_ = "2019-05-07";

sub USAGE{
	my $INFO = qq{            MKDEB ($_VERSION_)
		            Written by terminalforlife (terminalforlife\@yahoo.com)

		            ...

		SYNTAX:     mkdeb [OPTS] KEY=VALUE . . .

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.

		KEYS:       base=PATH               - Directory in which package files will live.
		            name=STRING             - The name of the project to be packaged.

		NOTE:       All KEYS are written in key=value format.
	};

	print($INFO =~ tr/\t//dr)
}

# Parse OPTS.
while(defined($ARGV[0])){
	if($ARGV[0] =~ /^(--help|-h|-\?)$/){
		USAGE;
		exit 0
	}elsif($ARGV[0] =~ /^(--version|-v)$/){
		print("$_VERSION_\n");
		exit 0
	}elsif($ARGV[0] =~ /^-.*/){
		TFL::FAIL(1, __LINE__, "Incorrect argument(s) specified")
	}else{
		last
	}

	shift(@ARGV)
}

TFL::DepChk('/usr/bin/dpkg-deb', 1, __LINE__);

my %KEYS;

# Parse CMDS.
while($ARGV[0]){
	if(TFL::KeyVal($ARGV[0], 0) eq 'base'){
		$KEYS{BASE} = TFL::KeyVal($ARGV[0], 1)
	}elsif(TFL::KeyVal($ARGV[0], 0) eq 'name'){
		$KEYS{NAME} = TFL::KeyVal($ARGV[0], 1)
	}else{
		TFL::FAIL(1, __LINE__, "Incorrect argument(s) specified")
	}

	shift(@ARGV)
}

foreach(keys(%KEYS)){ # All keys in hash %KEYS must be defined.
	TFL::FAIL(1, __LINE__, "The '$_' key is not defined.") if not defined($_)
}

if(-d $KEYS{BASE}){
	TFL::FAIL(1, __LINE__, "Directory for 'base' already exists.")
}else{
	mkdir($KEYS{BASE})
}

#sub MkControl{
#	open(my $FH, '>', "$/control");
#
#	my $CONTROL_CONTENTS = qq{Package: $ARGV[1]
#		Version: $VERSION
#		Architecture: all
#		Essential: no
#		Section: $ARGV[2]
#		Priority: optional
#		Depends: $ARGV[4]
#		Maintainer: TFL/LL <terminalforlife\@yahoo.com>
#		Installed-Size: $_[3]
#		Description: $SHORT_DESCRIPTION[3]
#		Homepage: https://github.com/terminalforlife/$_[0]
#	};
#
#	print($FH $CONTROL_CONTENTS =~ s/\t//gr);
#
#	close($FH)
#}
