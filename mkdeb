#!/usr/bin/perl

#----------------------------------------------------------------------------------
# Project Name      - perlmisc/mkdeb
# Started On        - Wed  1 May 23:27:08 BST 2019
# Last Change       - Wed  8 May 08:17:58 BST 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# WARNING: Experimental work-in-progress. USE AT YOUR OWN RISK.
#
# Even when/if this is finished, it's going to be more for personal use, unless it
# evolves into something more. I plan to build a lot of DEB packages, hence this.
#----------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use POSIX 'setuid', 'setgid';
use File::Copy 'copy';
use File::Path 'make_path';
use File::Basename 'dirname', 'basename';
use TFL; # <-- libTFL-perl

my $_VERSION_ = "2019-05-08";

sub USAGE{
	my $INFO = qq{            @{[uc($0)]} ($_VERSION_)
		            Written by terminalforlife (terminalforlife\@yahoo.com)

		            ...

		SYNTAX:     $0 [OPTS] CMDS FILES

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.

		CMDS:       BASE=PATH               - Directory in which package files will live.
		            NAME=STRING             - The name of the project to be packaged.

		NOTE:       All CMDS are written in key=value format.

		            The FILES part of the command must consist of absolute paths, and must
		            not only point to the files to add, but also the files for md5sums.
	};

	print($INFO =~ tr/\t//dr)
}

while(defined($ARGV[0])){
	if($ARGV[0] =~ /^(--help|-h|-\?)$/){
		USAGE; exit 0
	}elsif($ARGV[0] =~ /^(--version|-v)$/){
		print("$_VERSION_\n"); exit 0
	}elsif($ARGV[0] =~ /^-.*/){
		TFL::FAIL(1, __LINE__, "Incorrect argument(s) specified")
	}else{
		last
	}

	shift(@ARGV)
}

TFL::DepChk('/usr/bin/md5sum', 1, __LINE__);
TFL::DepChk('/usr/bin/dpkg-deb', 1, __LINE__);

#TFL::FAIL(1, __LINE__, "Root access via sudo is required.")
#	if $> != 0 and not defined($ENV{SUDO_UID});

my @KEY_LIST = (
	'BASE', 'NAME', 'VERS', 'SECT', 'ESSE', 'DEPS',
	'SIZE', 'SHDE', 'LODE', 'PRIO', 'ARCH', 'REPO'
);

my %KEYS;
while($ARGV[0]){
	last() if $ARGV[0] =~ /^\//; # <-- Ensure there are arguments left for FILES.

	foreach(@KEY_LIST){
		if(uc(TFL::KeyVal($ARGV[0], 0)) eq $_){
			$KEYS{$_} = TFL::KeyVal($ARGV[0], 1)
		}
	}

	shift(@ARGV)
}

TFL::Defined(\%KEYS, \@KEY_LIST);

my $DEBIAN = $KEYS{BASE} =~ s/\/$//r . '/DEBIAN';
make_path($DEBIAN) unless -d $DEBIAN;
chmod(0755, $DEBIAN); # <-- Required permissions.

{ # Generate the control file.
	open(my $FH, '>', "$DEBIAN/control");
	my $DATA = qq{Package: $KEYS{NAME}
		Version: $KEYS{VERS}
		Architecture: $KEYS{ARCH}
		Essential: $KEYS{ESSE}
		Section: $KEYS{SECT}
		Priority: $KEYS{PRIO}
		Depends: $KEYS{DEPS}
		Maintainer: TFL/LL <terminalforlife\@yahoo.com>
		Installed-Size: $KEYS{SIZE}
		Description: $KEYS{SHDE}
		  $KEYS{LODE}
		Homepage: https://github.com/terminalforlife/$KEYS{REPO}
	};

	print($FH $DATA =~ tr/\t//dr);
	close($FH)
}

{ # Generate the md5sums file, and copy files over.
	my $SUMS = "$DEBIAN/md5sums";
	unlink($SUMS) if -f $SUMS;
	open(my $FH, '>>', $SUMS);

	while($ARGV[0]){
		if(-f $ARGV[0] and -r $ARGV[0]){
			chomp(my $SUM = readpipe("/usr/bin/md5sum $ARGV[0]"));
			print($FH "$SUM\n");

			my $NEW_PATH = "$KEYS{BASE}/" . dirname($ARGV[0]) =~ s/^\///r;
			make_path($NEW_PATH);
			copy($ARGV[0], "$NEW_PATH/");

			#chown(0, 0, "$NEW_PATH/" . basename($ARGV[0]));
			print(
				"chown 0:0 '$KEYS{BASE}/" .
				$ARGV[0] =~ s/^\///r . "'\n"
			); # <-- Temporary, sloppy workaround.

			my $FOUND = 0;
			foreach(@{[split(':', $ENV{PATH})]}){
				$FOUND++ if $_ eq dirname($ARGV[0])
			}

			chmod(0755, "$NEW_PATH/" . basename($ARGV[0]))
				if $FOUND > 0
		}else{
			TFL::FAIL(1, __LINE__, "File(s) missing or inaccessible.")
		}

		shift(@ARGV)
	}

	close($FH);
}
