#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/git-tudu
#----------------------------------------------------------------------------------
# Project Name      - PerlProjects/git-tudu
# Started On        - Sat 14 Dec 19:42:12 GMT 2019
# Last Change       - Wed 18 Dec 21:22:24 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

use v5.22.1;
use strict;
use warnings;
use autodie;
use File::Basename 'basename', 'dirname';
use TFL; # <-- libtfl-perl (>= 2019-12-14)
use File::Find; # <-- libfile-listing-perl (>= 6.04-1)
use List::MoreUtils; # <-- liblist-moreutils-perl (>= 0.413-1build1)
use Term::ReadKey 'GetTerminalSize'; # <-- libterm-readkey-perl (>= 2.33-1build1)
use Term::ANSIColor 'color', 'colorvalid';

# I'll disable it when this is actually needed.
no warnings 'uninitialized';

my $CurVer = "2019-12-18";
my $Progrm = basename($0);

sub Usage{
	my $Info = qq{            @{[uc($Progrm)]} ($CurVer)
		            Written by terminalforlife <terminalforlife\@yahoo.com>

		            Get an overview of programming todos with this developer tool.

		SYNTAX:     $Progrm [OPTS] [REGEX]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --ignore-case|-i        - Case-insensitive search for REGEX.
		            --alt-path|-P PATH      - Override value in config with PATH.
		            --config PATH           - Override default file with PATH.
		            --force-reset           - Force regeneration of user's config.

		NOTE:       Signifying the end of OPTS with '--' is supported.

		            When specifying an alternative PATH, it's possible and intended
		            that the user could provide a file, instead of a directory.

		            Where REGEX is a REGEX string to use to filter todo entries.

		            All binary files will be ignored, as will those for which
		            needed permissions are lacking.

		CONFIG:     A user configuration file (see below) will be generated when
		            the program is executed without such a file existing.

		            The default 'Target' is the current working directory, and the
		            default TODO string is '#TODO:', where '#' indicates a comment.

		FILE:       ~/.config/git-tudu/config
	};

	print($Info =~ tr/\t//dr)
}

my (
	$Target, $Pretty, $DoCase, %ColorHash, %CharHash,
	$SolidTarget, $DoZPNums, $ForceReset
);

# Tabs, whitespaces, and other characters prior to this will be ignored, except
# the one space before and after the todo string. Don't want to get confused with
# any code which happens to have this string in it. Must be one field.
my $TodoStr = '#TODO:';

# Snip the one whitespace before the todo entry.
my $TodoStrLen = length($TodoStr) + 1;

my $MainDir = "$ENV{HOME}/.config/$Progrm";
mkdir($MainDir) unless -d $MainDir;

my $TargetFile = "$MainDir/target";
my $ExcludeFile = "$MainDir/exclude";
my $ConfigFile = "$MainDir/config";

# Except TYPE_* keys, which are in hashes of their own.
my @ValidKeys = (
	'Target', 'Pretty', 'TodoStr', 'Char_End', 'Char_Mid', 'Char_Bul', 'DoZPNums',
	'Color_Bullet', 'Color_EOL', 'Color_EndChar', 'Color_FileName', 'Char_Ofl',
	'Color_MidChar', 'Color_Numbers', 'Color_TodoBody',
);

while(defined($ARGV[0])){
	if($ARGV[0] =~ /^--$/){
		last # <-- End of option processing.
	}elsif($ARGV[0] =~ '^(--help|-h|-\?)$'){
		Usage(1); exit 0
	}elsif($ARGV[0] =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit 0
	}elsif($ARGV[0] =~ '^(--ignore-case|-i)$'){
		$DoCase = 'i'
	}elsif($ARGV[0] =~ '^(--alt-path|-P)$'){
		shift(@ARGV);

		TFL::Err(1, "Option '--alt-path|-P' requires a PATH.")
			unless length($ARGV[0]) > 0;

		$Target = $ARGV[0];
		$SolidTarget = 'true'
	}elsif($ARGV[0] =~ '^(--config|-c)$'){
		shift(@ARGV);

		TFL::Err(1, "Option '--config|-c' requires a PATH.")
			unless length($ARGV[0]) > 0;

		$ConfigFile = $ARGV[0]
	}elsif($ARGV[0] =~ '^(--force-reset|-F)$'){
		$ForceReset = 'true'
	}elsif($ARGV[0] =~ '^-'){
		TFL::Err(1, "Incorrect option(s) -- see: $Progrm -h")
	}else{
		last
	}

	shift(@ARGV)
}

if (scalar(@ARGV) > 1){
	TFL::Err(1, "Too many arguments -- see: $Progrm -h")
}elsif ($DoCase eq 'i' and scalar(@ARGV) == 0){
	TFL::Err(1, "Option '--ignore-case|-i' used, but no REGEX provided.")
}

my $TermCols = @{[GetTerminalSize()]}[0];

unlink($ConfigFile) if $ForceReset eq 'true';

# Read the `config` file, if found, then populate the config hash.
if (-f -r -T $ConfigFile){
	sub Boolean{
		TFL::Err(1, "Invalid boolean '$_[0]' detected.")
			unless $_[0] eq 'true' or $_[0] eq 'false'
	}

	open(my $FH, '<', $ConfigFile);
	my @Data = <$FH>;
	close($FH);

	foreach (@Data){
		next if length($_) <= 1 or $_ =~ '^#';
		chomp(my ($Key, $Value) = split('=', $_));

		# Iterate over ckeys to check they're valid.
		my $IsFound;
		foreach (@ValidKeys){
			if ($Key eq $_){
				$IsFound = 'true';
				last
			}
		}

		if ($IsFound eq 'true'){
			if ($Key eq 'Pretty'){
				Boolean($Value);
				$Pretty = $Value
			}elsif ($Key eq 'Target'){
				$Target = $Value unless $SolidTarget eq 'true'
			}elsif ($Key eq 'TodoStr'){
				$TodoStr = $Value
			}elsif ($Key eq 'DoZPNums'){
				Boolean($Value);
				$DoZPNums = $Value
			}elsif ($Key =~ '^Char_.*'){
				$CharHash{$Key} = $Value
			}elsif ($Key =~ '^Color_.*'){
				$ColorHash{$Key} = $Value =~ tr/['"]//dr
			}else{
				TFL::Err(1, "Invalid color '$Value' detected.")
					unless colorvalid($Value);
			}
		}else{
			TFL::Err(1, "Invalid key '$Key' detected.")
		}
	}
}else{
	TFL::Err(1, "User configuration file could not be generated.")
		unless -w -x dirname($ConfigFile);

	# Generate the default config.
	open(my $FH, '>', $ConfigFile);

	my $Contents = qq{# User configuration file for `$Progrm` ($CurVer)

		# Specify the location (file or directory) for $Progrm to use.
		Target=./

		# This string, assumed to have a whitespace either side of it, will be
		# looked for in each applicable line.
		TodoStr=#TODO:

		# Zero-pad line numbers of each discovered todo entry.
		DoZPNums=false

		# When enabled, enable the display of extra ASCII characters. (see below)
		Pretty=false

		# Adjust the superfluous characters used, especially when 'Pretty=true'.
		Char_Bul=*
		Char_End=+
		Char_Mid=|

		# This will always be shown, unless specifically disabled.
		Char_Ofl=#

		# Various color keys and their values. To disable color support, simply
		# set each of these to null, by removing all of their values.
		Color_Bullet=white
		Color_EOL=bright_black
		Color_EndChar=white
		Color_FileName=bright_black
		Color_MidChar=white
		Color_Numbers=red
		Color_TodoBody=bright_white};

	printf($FH "%s\n", $Contents =~ tr/\t//dr);

	close($FH);
	printf("File '~/.config/git-tudu/config' generated -- please restart.\n");
	exit(0)
}

# Read file ($_[0]) then output pretty and column-mindful list of todo entries.
# For now, we're dealing with one-liners only. Eventually, I'd like to see
# multi-line todo entries, but that will require some faffing about.
sub GetTodo{
	open(my $FH, '<', $_[0]);
	my $FileShown = $_[0] =~ s/$ENV{HOME}/\~/dr;

	my (@TodoList, $Valid);
	while (<$FH>){
		undef($Valid);
		chomp($_);

		# Skip empty lines, or lines with only trailing whitespaces, tabs, etc.
		next if $_ =~ /(^$|^#+ |^[[:space:]]+$)/;

		# Check each field in line for the todo string.
		$Valid = 'true' if grep(m/^$TodoStr$/, split(' ', $_));

		if ($Valid eq 'true'){
			my $Todo = $_ =~ s/^.*$TodoStr //dr;
			my $TodoLen = length($Todo);

			# If entry is too long, snip it with the overflow character.
			if ($TodoLen > $TermCols - 10){
				$Todo = substr($Todo, 0, $TermCols - ($TodoLen + 12)) .
					color($ColorHash{Color_EOL}) . $CharHash{Char_Ofl} .
					color('reset')
			}

			# Look for user-provided REGEX in line, if one is given.
			if (length($ARGV[0]) > 0){
				if ($DoCase eq 'i'){
					next unless grep(m/$ARGV[0]/i, $Todo)
				}else{
					next unless grep(m/$ARGV[0]/, $Todo)
				}
			}

			# Whether to zero-pad line numbers or not.
			my $FNums;
			if ($DoZPNums eq 'true'){
				$FNums = ' %0.7d '
			}else{
				$FNums = ' %7d '
			}

			# Maximum line supported is 9,999,999. If an override feature is
			# requested, I'll probably get to adding that. If you have one file
			# of anything like that number, you probably should split it up.
			push(
				@TodoList,
				sprintf(
					color($ColorHash{Color_Numbers}) . $FNums . color('reset') .
					color($ColorHash{Color_MidChar}) . "%s" . color('reset') .
					color($ColorHash{Color_TodoBody}) . " %s" . color('reset'),
					$., $CharHash{Char_Mid}, $Todo
				)
			)
		}
	}

	close($FH);

	# Don't show anything if no todos were found.
	return(1) unless scalar(@TodoList) > 0;

	# To ensure the filenames don't flow over the coloumn limit.
	my $DirName = dirname($FileShown) =~ s/.*\//...\//dr . '/';
	$FileShown = $DirName . basename($FileShown)
		if length($FileShown) > $TermCols - 2;

	printf(
		color($ColorHash{Color_Bullet}) . " %s " . color('reset') .
		color($ColorHash{Color_FileName}) . "%s" . color('reset') .
		color($ColorHash{Color_EndChar}) . "\n%10s\n" . color('reset'),
		$CharHash{Char_Bul}, ${FileShown}, $CharHash{Char_End}
	);

	printf(color($ColorHash{Color_MidChar}) . "%s\n" . color('reset'), $_)
		foreach @TodoList;

	printf(color($ColorHash{Color_EndChar}) . "%10s\n" .
		color('reset'), $CharHash{Char_End})
}

if (-d $Target){
	TFL::Err(1, 'Directory inaccessible.') unless -r -x $Target;

	our @FileArr;

	sub Conditions{
		my $Name = $File::Find::name;

		# Must be a readable non-binary file.
		return(1) unless -f -r -T $Name;

		my @SplitName = split('/', $Name);
		foreach (@SplitName){
			return(1) if $_ eq '.git'
		}

		push(@FileArr, $Name)
	}

	# Recursive search for files in `Target` per `Conditions()`.
	find(\&Conditions, $Target);

	foreach (@FileArr){GetTodo($_)}
}elsif (-f $Target){
	TFL::Err(1, 'File unreadable.') unless -r $Target;
	TFL::Err(1, 'File is binary.') if -r -B $Target;

	GetTodo($Target)
}else{
	TFL::Err(1, 'Non-existent or invalid target specified.')
}
