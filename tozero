#!/usr/bin/env perl

#----------------------------------------------------------------------------------
# Project Name      - tozero (Perl Rewrite)
# Started On        - Sat 18 May 21:21:35 BST 2019
# Last Change       - Sat 14 Dec 18:47:46 GMT 2019
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Unfinished. Sort of put on pause until I can establish a decent method to display
# comma-separated numbers; otherwise, it'd be pretty unpleasant to read.
#----------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use TFL; # <-- libtfl-perl (>= 2019-05-07)
use Time::Piece;

no warnings 'uninitialized'; # <-- Not needed here.

my $_VERSION_ = "2019-05-26";

my $Only;
my $IntOnly = 0;

while(defined($ARGV[0])){
	if($ARGV[0] =~ /^(--help|-h|-\?)$/){
		print("USAGE: tozero [[--version|-v] | [--help|-h|-?]] XXXX-XX-XX\n"); exit 0
	}elsif($ARGV[0] =~ /^(--version|-v)$/){
		print("$_VERSION_\n"); exit 0
	}elsif($ARGV[0] =~ /^-.*/){
		TFL::FAIL(1, __LINE__, "Incorrect argument(s) specified")
	}else{
		last
	}

	shift(@ARGV)
}

my $Target = shift(@ARGV);
TFL::FAIL(1, __LINE__, "Invalid target date -- YYYY-MM-DD expected.")
	if $Target !~ /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/;

# Fetch Current Time, then Target Time, in seconds since epoch.
my $CT = localtime->epoch;
my $TT = Time::Piece->strptime($Target, '%Y-%m-%d')->epoch;
my $Delta = $TT - $CT;

sub CommaInt{
	my $Result;
	my $Count = 0;
	my $Length = length($_[0]);

	if($Length >= 4){
		while($Count <= $Length){
			$Result .= substr($_[0], $Count, 1);



			$Count++;
		}
	}else{
		$Result = $_[0]
	}

	return($Result)
}

print(CommaInt(1000) . "\n");
print($Delta . "\n")
