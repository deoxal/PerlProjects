#!/usr/bin/env perl

#----------------------------------------------------------------------------------
# Project Name      - PerlProjects/ldmod (List & Describe Modules)
# Started On        - Sat 11 Jan 14:33:58 GMT 2020
# Last Change       - Sat 11 Jan 18:34:00 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# A Perl rewrite of and expansion on an old TFL shell function called `lsmodd()`.
#----------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use TFL 'Err', 'DepChk'; # <-- libtfl-perl (>= 2020-01-02)

no warnings 'uninitialized';

my $CurVer = "2020-01-11";

my $ProcMod = '/proc/modules';

sub Usage{
	print(qq{            @{[uc($TFL::PROGNAME)]} ($CurVer)
		            $TFL::AUTHOR

		            List, search through, and briefly describe kernel modules.

		SYNTAX:     $TFL::PROGNAME [OPTS] [REGEX]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --ignore-case|-i        - Case-insensitive search for REGEX.
		            --show-all|-a           - Don't omit undescribed modules.

		NOTE:       Where REGEX is a REGEX string to use to filter by module names.

		FILE:       $ProcMod
	} =~ tr/\t//dr)
}

my ($DoCase, $ShowAll, $LiveOnly);

while (defined($ARGV[0])){
	if ($ARGV[0] =~ '^(--help|-h|-\?)$'){
		Usage(1); exit(0)
	}elsif ($ARGV[0] =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit(0)
	}elsif($ARGV[0] =~ '^(--ignore-case|-i)$'){
		$DoCase = 'i'
	}elsif($ARGV[0] =~ '^(--show-all|-a)$'){
		$ShowAll = 'true'
	}elsif ($ARGV[0] =~ '^-'){
		Err(1, "Incorrect option(s) specified.")
	}else{
		last
	}

	shift(@ARGV)
}

my $RegexStr = $ARGV[0] if defined($ARGV[0]);

if (scalar(@ARGV) > 1){
	Err(1, "Too many arguments -- see: $TFL::PROGNAME -h")
}elsif ($DoCase eq 'i' and scalar(@ARGV) == 0){
	Err(1, "Option '--ignore-case|-i' used, but no REGEX provided.")
}elsif (not -f -r $ProcMod){
	Err(1, "File '$ProcMod' missing or inaccessible.")
}

DepChk('modinfo');

sub FetchMods{
	open(my $FH, '<', $_[0]);

	my @Mods;
	while (<$FH>){
		chomp(my @LineArr = split(' ', $_));

		push(@Mods, $LineArr[0])
	}

	close($FH);

	return(@Mods);
}

foreach (sort(FetchMods($ProcMod))){
	# Look for user-provided REGEX in line, if one is given.
	if (length($RegexStr) > 0){
		if ($DoCase eq 'i'){
			next unless grep(m/$RegexStr/i, $_)
		}else{
			next unless grep(m/$RegexStr/, $_)
		}
	}

	# This is hopefully just a temporary measure.
	chomp(my $Desc = `modinfo -d "$_" 2> /dev/null` || '?');

	if ($ShowAll eq 'true'){
		printf("%s - %s\n", $_, $Desc)
	}else{
		printf("%s - %s\n", $_, $Desc) unless $Desc eq '?'
	}
}
