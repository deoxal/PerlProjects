#!/usr/bin/env bash

#------------------------------------------------------------------------------
# Project Name      - PerlProjects/devutils/ubuchk.test
# Started On        - Wed 15 Jan 13:44:46 GMT 2020
# Last Change       - Thu  6 Feb 18:25:37 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Developer shell script for testing results of `ubuchk`.
#------------------------------------------------------------------------------

set -e
. /usr/lib/tflbp-sh/Err
. /usr/lib/tflbp-sh/ChkDep
set +e

CurVer='2020-02-06'
Progrm=${0##*/}

Usage(){
	while read; do
		printf '%s\n' "$REPLY"
	done <<-EOF
		            ${Progrm^^} ($CurVer)
		            Written by terminalforlife <terminalforlife@yahoo.com>

		            Developer script to perform various tests on UbuChk.

		SYNTAX:     $Progrm [OPTS] [TEST_1 [TEST_2] ...]

		OPTS:       --help|-h|-?            - Display this help information.
		            --version|-v            - Output the version datestamp.
		            --auto|-a               - Run tests non-interactively.
	EOF
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--auto|-a)
			Auto='true' ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

for Arg; {
	[[ $Arg =~ ^[0-9]+$ ]] || Err 1 'Invalid test number.'
}

ChkDep tput mktemp perl sed sleep rm cp

Run="$HOME/GitHub/terminalforlife/Personal/PerlProjects/source/ubuchk"
RealConfig="$HOME/.config/ubuchk/config"
TestConfig=`mktemp`

cp "$RealConfig" "$TestConfig"

printf -v Spaces '%*s' `tput cols` ' '
Bars=${Spaces// /-}

cp "$RealConfig" "$TestConfig"

tput smcup
tput clear

SigHandler(){
	Sig=$?

	rm "$TestConfig" 2> /dev/null
	tput rmcup
	exit $Sig
}

trap SigHandler EXIT ABRT QUIT HUP TERM INT

SetVal(){
	if [ $# -eq 0 -o $# -gt 2 ]; then
		Err 1 "Function 'SetVal()' needs at least one argument."
	else
		if [ -n "$2" ]; then
			sed -i "s|^$1=.*|$1=$2|" "$TestConfig" || exit 4
		else
			sed -i 's|^\('"$1"'=\).*|\1|' "$TestConfig" | head || exit 4
		fi
	fi
}

Title(){
	printf "\r[$1] \e[1;31m%s\e[0m" $1 "$2"
	sleep 1s
}

Execute(){
	[ "$Auto" == 'true' ] || tput clear

	Message=$1
	shift

	[ $# -gt 0 ] && printf '\e[0;37m%s\e[0m\n' "$@"

	if [ "$Auto" == 'true' ]; then
		for I in {3..0}; { Title $I "$Message"; }
	else
		for I in {2..0}; { Title $I "$Message"; }
	fi

	# Double-time, so you can actually read something in time.

	printf '\n\n'
	printf '%s\n' "$Bars"

	perl $Run --config "$TestConfig" "$@"
	ExitStatus=$?

	printf '%s\n\nexit(\e[1;36m%d\e[0m)\n\n\n' "$Bars" $ExitStatus

	[ "$Auto" == 'true' ] || read -n 1 -s -p 'Press any key to continue...'
}

#-----------------------------------------------------------------Test Commands

for Test; {
	# Set all of the default keys first.
	SetVal IsUbuntu false
	SetVal ShowSummary true
	SetVal SkipIDs
	SetVal Verbose false
	SetVal KernParams true
	SetVal SkipKP
	SetVal PathPerms true
	SetVal PurgeChk true
	SetVal HardAPT true
	SetVal SkipAPT APT::Install-Recommends
	SetVal SSHServer false
	SetVal SSHDConfig /etc/ssh/sshd_config
	SetVal UnwantedPKGs virtualbox-guest-dkms:all
	SetVal UnwantedPKGs virtualbox-guest-utils:all
	SetVal Firewall true
	SetVal SystemD true
	SetVal KernMods true
	SetVal SkipMKs joydev
	SetVal CustomKMs

	if [ $Test -eq 1 ]; then
		Execute 'Default configuration settings.'
	elif [ $Test -eq 2 ]; then
		Execute "Display 'Usage()' information." --help
	elif [ $Test -eq 3 ]; then
		Execute 'Display version string.' --version
	elif [ $Test -eq 4 ]; then
		SetVal Verbose true
		Execute "Default, with 'Verbose' key enabled."
	elif [ $Test -eq 5 ]; then
		Execute "Default, with 'Verbose' option." --verbose
	elif [ $Test -eq 6 ]; then
		SetVal IsUbuntu true
		Execute "Enable 'IsUbuntu' key."
	elif [ $Test -eq 7 ]; then
		SetVal SkipIDs 5756
		Execute "Skip alert #5756 via 'SkipIDs' key."
	elif [ $Test -eq 8 ]; then
		Execute "Skip alert #5756 via option." --skip=5756
	elif [ $Test -eq 9 ]; then
		SetVal KernParams false
		Execute "Disable 'KernParams' key."
	elif [ $Test -eq 10 ]; then
		SetVal SkipKP vm.swappiness
		Execute "Skip 'vm.swappiness' via 'SkipKP' key."
	elif [ $Test -eq 11 ]; then
		SetVal PathPerms false
		Execute "Disable 'PathPerms' key."
	elif [ $Test -eq 12 ]; then
		SetVal PurgeChk false
		Execute "Disable 'PurgeChk' key."
	elif [ $Test -eq 13 ]; then
		SetVal HardAPT false
		Execute "Disable 'HardAPT' key."
	elif [ $Test -eq 14 ]; then
		SetVal SkipAPT
		Execute "Un-skip 'APT::Install-Recommends' via 'HardAPT' key."
	else
		Err 0 "Number '$Test' is not a test."
	fi
}

#------------------------------------------------------------------------------

printf '\n'
read -n 1 -s -p 'Press any key to finish...'
