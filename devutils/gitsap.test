#!/usr/bin/env bash

#----------------------------------------------------------------------------------
# Project Name      - PerlProjects/devutils/gitsap.test
# Started On        - Wed 15 Jan 13:44:46 GMT 2020
# Last Change       - Sun 19 Jan 17:18:14 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Developer shell script for testing results of `gitsap`.
#----------------------------------------------------------------------------------

set -e
. /usr/lib/tflbp-sh/Err
. /usr/lib/tflbp-sh/ChkDep
set +e

CurVer='2020-01-19'
Progrm=${0##*/}

Usage(){
	while read; do
		printf "%s\n" "$REPLY"
	done <<-EOF
		            ${Progrm^^} ($CurVer)
		            Written by terminalforlife (terminalforlife@yahoo.com)

		            Developer script to perform various tests on GitSAP.

		SYNTAX:     $Progrm [OPTS] [TEST_1 [TEST_2] ...]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --auto|-a               - Work through tests non-interactively.
	EOF
}

while [ "$1" ]; do
	case $1 in
		--help|-h|-\?)
			Usage; exit 0 ;;
		--version|-v)
			printf '%s\n' "$CurVer"; exit 0 ;;
		--auto|-a)
			Auto='true' ;;
		-*)
			Err 1 'Incorrect option(s) specified.' ;;
		*)
			break ;;
	esac
	shift
done

for Argument in "$@"; {
	if ! [[ $Argument =~ ^[0-9]+$ ]]; then
		Err 1 'Invalid test number.'
	fi
}

ChkDep tput mktemp perl sed sleep rm cp

Run="$HOME/GitHub/terminalforlife/Personal/PerlProjects/source/gitsap"
RealConfig="$HOME/.config/gitsap/config"
TestConfig=`mktemp`

cp "$RealConfig" "$TestConfig"

printf -v Spaces '%*s' `tput cols` ' '
Bars=${Spaces// /-}

cp "$RealConfig" "$TestConfig"

tput smcup
tput clear

SigHandler(){
	Sig=$?

	rm "$TestConfig" 2> /dev/null
	tput rmcup
	exit $Sig
}

trap SigHandler EXIT ABRT QUIT HUP TERM INT

SetVal(){
	if [ $# -eq 0 -o $# -gt 2 ]; then
		Err 1 "Function 'SetVal()' needs at least one argument."
	else
		if [ -n "$2" ]; then
			sed -i "s|^$1=.*|$1=$2|" "$TestConfig" || exit 4
		else
			sed -i 's|^\('"$1"'=\).*|\1|' "$TestConfig" | head || exit 4
		fi
	fi
}

Execute(){
	[ "$Auto" == 'true' ] || tput clear

	Message=$1
	shift

	[ $# -gt 0 ] && printf '\e[0;37m%s\e[0m\n' "$@"

	# Obnoxious to differentiate from test script to program.
	for I in {1..0}; {
		for Color in '1;32' '0;31' '2;32' '0;31' '0;32' '0;31' '1;31'; {
			printf "\r\e[${Color}m%s\e[0m" $I "$Message"
			sleep 0.03s

			[ "$Auto" == 'true' ] && sleep 0.07s
		}
	}

	printf '\n\n'
	printf '%s\n' "$Bars"

	perl $Run --config "$TestConfig" "$@"
	ExitStatus=$?

	printf '%s\n' "$Bars"
	printf '\nexit(\e[1;36m%d\e[0m)\n\n' $ExitStatus

	printf '\n'
	[ "$Auto" == 'true' ] || read -n 1 -s -p 'Press any key to continue...'
}

#---------------------------------------------------------------------Test Commands

for Test; {
	# Set all of the default keys first.
	SetVal Target NULL
	SetVal AbsoPath false
	SetVal ShowSize false
	SetVal ShowBranch false
	SetVal OmitClean false
	SetVal RegexStr
	SetVal ANSIColors true
	SetVal Parseable false
	SetVal Compact true
	SetVal ShowLatest false
	SetVal LatestFormat describe
	SetVal Char_Clean
	SetVal Char_Fix
	SetVal Char_Initial
	SetVal Char_Leads
	SetVal Char_New
	SetVal Char_Removed
	SetVal Char_Uncommitted
	SetVal Char_Unknown
	SetVal Char_Unstaged
	SetVal Color_Author white
	SetVal Color_Date white
	SetVal Color_Hash white
	SetVal Color_Repo red
	SetVal Color_RepoDir red
	SetVal Color_Status bright_white
	SetVal Color_Symbol bright_red

	if [ $Test -eq 1 ]; then
		Execute 'Default configuration settings.'
	elif [ $Test -eq 2 ]; then
		SetVal Target '$HOME/GitHub/terminalforlife'
		Execute "Default, with 'Target' value including a variable."
	elif [ $Test -eq 3 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		Execute "Default, with valid 'Target' value."
	elif [ $Test -eq 4 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife/Personal"
		Execute "Valid 'Target' value, but only one directory with repositories."
	elif [ $Test -eq 5 ]; then
		SetVal Target
		Execute "Empty value of 'Target' key."
	elif [ $Test -eq 6 ]; then
		SetVal Target ' '
		Execute "Set invalid 'Target' value."
	elif [ $Test -eq 7 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife/"
		Execute "End 'Target' value with '/' character."
	elif [ $Test -eq 8 ]; then
		SetVal Target '/tmp'
		Execute "Set valid but unlikely 'Target' value."
	elif [ $Test -eq 9 ]; then
		SetVal Target "/root"
		Execute "Set root (locked-down) directory for 'Target' value."
	elif [ $Test -eq 10 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife/Personal/PerlProjects"
		Execute "Set 'Target' to within a repository tree."
	elif [ $Test -eq 11 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal AbsoPath true
		Execute "Enable 'AbsoPath' key."
	elif [ $Test -eq 12 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal AbsoPath true
		SetVal ShowSize true
		SetVal ShowBranch true
		SetVal ANSIColors false
		SetVal Compact false
		SetVal ShowLatest true
		Execute 'Show plenty, but bisable ANSI color support.'
	elif [ $Test -eq 13 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal RegexStr 'i3Config'
		Execute "Use matching 'RegexStr' key value of (/i3Config/) in configuration file."
	elif [ $Test -eq 14 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal RegexStr '^i3Config$'
		Execute "Use non-matching 'RegexStr' key value of (/^i3Config$/) in configuration file."
	elif [ $Test -eq 15 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		Execute "Use matching 'RegexStr' value (/i3Config/) via the final argument." 'i3Config'
	elif [ $Test -eq 16 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		Execute "Use non-matching 'RegexStr' key value (/^i3Config$/) via the final argument." '^iCfig$'
	elif [ $Test -eq 17 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal Color_Symbol bright_orange
		Execute "Set 'Color_Symbol' to an invalid color value."
	elif [ $Test -eq 18 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal Char_Clean 'X'
		Execute "Set 'Char_Clean' to a valid character key."
	elif [ $Test -eq 19 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal Char_Clean '_-'
		Execute "Set 'Char_Clean' to an invalid (too long) character key."
	elif [ $Test -eq 20 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal AbsoPath true
		SetVal ShowSize true
		SetVal ShowBranch true
		SetVal Compact false
		SetVal ShowLatest true
		SetVal Color_Author bright_yellow
		SetVal Color_Date bright_yellow
		SetVal Color_Hash bright_yellow
		SetVal Color_Repo bright_yellow
		SetVal Color_RepoDir bright_yellow
		SetVal Color_Status bright_yellow
		SetVal Color_Symbol bright_yellow
		Execute 'Show plenty & Change all color keys to bright yellow.'
	elif [ $Test -eq 21 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal Compact 'asdf'
		Execute "Set 'Compact' key to invalid value."
	elif [ $Test -eq 22 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal Compact false
		Execute "Disabled 'Compact' key."
	elif [ $Test -eq 23 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal Compact false
		SetVal ShowLatest true
		Execute "Disable 'Compact' and enable 'ShowLatest' key. ('describe')"
	elif [ $Test -eq 24 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal Compact false
		SetVal ShowLatest true
		SetVal LatestFormat array
		Execute "Disable 'Compact' and enable 'ShowLatest' key. ('array')"
	elif [ $Test -eq 25 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal Compact false
		SetVal ShowLatest true
		SetVal LatestFormat simple
		Execute "Disable 'Compact' and enable 'ShowLatest' key. ('simple')"
	elif [ $Test -eq 26 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal ShowSize true
		Execute "Enable 'ShowSize' key."
	elif [ $Test -eq 27 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal ShowBranch true
		Execute "Enable 'ShowBranch' key."
	elif [ $Test -eq 28 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal OmitClean true
		Execute "Enable 'OmitClean' key."
	elif [ $Test -eq 29 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		Execute 'Parseable output via OPT.' '--parseable'
	elif [ $Test -eq 30 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal Parseable true
		Execute "Parseable output via the 'Parseable' key."
	elif [ $Test -eq 31 ]; then
		SetVal Target "$HOME/GitHub/terminalforlife"
		SetVal AbsoPath true
		SetVal ShowSize true
		SetVal ShowBranch true
		SetVal ANSIColors false
		SetVal Parseable true
		SetVal Compact false
		SetVal ShowLatest true
		Execute "Plenty of parseable output with 'ANSIColors' disabled."
	else
		Err 0 "Number '$Test' is not a test."
	fi
}

#----------------------------------------------------------------------------------

printf '\n'
read -n 1 -s -p 'Press any key to finish...'
