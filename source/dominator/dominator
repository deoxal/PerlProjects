#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/dominator
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/dominator/dominator
# Started On        - Thu 19 Mar 01:01:47 GMT 2020
# Last Change       - Thu 19 Mar 16:11:17 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Perl interpretation and revision of, and hopefully an improvement over, an
# interesting `domains.sh` program (AKA: DomainEnum), written in Shell
# (Bash), by GitHub user `bing0o`.
#
#   https://github.com/bing0o/bash_scripting
#
# Without the above, Dominator would never be a thing, so cheers, `bing0o`, for
# the inspiration and that which you've taught me through your projects.
#
# Features:
#
#TODO: Add ANSII color support, as a nod to the original.
#TODO: Add Amass support.
#TODO: Add Assetfinder support.
#TODO: Add Bufferover support.
#TODO: Add Findomain support.
#TODO: Add Subfinder support.
#TODO: Add Wayback support.
#TODO: Add man page.
#TODO: Is there any way to speed up Wayback? It's super slow! (site-side)
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   libjson-perl (>= 2.90-1)
#   libtfl-perl (>= 2020-01-03)
#   libwww-perl (>= 6.15-1)
#   perl (>= 5.22.1-9)
#------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use JSON::PP 'decode_json';
use LWP::UserAgent;
use TFL 'Err';

no warnings 'uninitialized';

my $CurVer = '2020-03-19';

sub Usage{
	print(qq{Usage: $TFL::PROGNAME [OPTS] [DOMAIN]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -a, --all                - Use all methods by which to list domains.
		  -m, --methods M[,M ...]  - Methods by which to list domains.
	} =~ tr/\t//dr)
}

my ($DoAll, @Methods, @AllDomains);

my @ValidMethods = (
	'CRT',                       # URL: https://crt.sh
	'Wayback'                    # URL: http://web.archive.org
);

while (defined($ARGV[0])){
	if ($ARGV[0] =~ '^(--help|-h)$'){
		Usage(); exit(0)
	}elsif ($ARGV[0] =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit(0)
	}elsif ($ARGV[0] =~ '^(--all|-a)$'){
		$DoAll = 'true'
	}elsif ($ARGV[0] =~ '^(--methods|-m)$'){
		Err(1, "Conflict between '$ARGV[0]' and '--methods|-m' options.")
			if $DoAll eq 'true';

		my @Args = split(',', $ARGV[1]);

		Err(1, "Option '$ARGV[0]' requires an argument.") if @Args == 0;

		foreach my $CurMethod (@Args){
			Err(1, "Invalid method '$CurMethod' detected.")
				unless grep({$CurMethod eq $_} @ValidMethods);

			push(@Methods, $CurMethod);
		}

		shift()
	}elsif ($ARGV[0] =~ '^-'){
		Err(1, "Incorrect option(s) specified.")
	}else{
		last
	}

	shift()
}

Err(1, "Domain required -- see: $TFL::PROGNAME -h") if @ARGV == 0;
Err(1, "Argument overflow -- see: $TFL::PROGNAME -h") if @ARGV > 1;

# Try to catch non-printables, tabs, whitespaces, newlines, etc.
Err(1, "Invalid domain.") unless $ARGV[0] =~ '^[[:alnum:][:punct:]]+$';

my $Target = $ARGV[0];

my %URL = (
	'CRT' => "https://crt.sh/?q=$Target&output=json&exclude=expired",
	'Wayback' => "https://web.archive.org/cdx/search/cdx?url=*.$Target&output=txt&fl=original&collapse=urlkey&page="
);

my $UA = LWP::UserAgent->new(
	'agent' => 'Mozilla/5.0',
	'protocols_allowed' => ['http', 'https'],
	'max_redirect' => 1,
	'timeout' => 3
);

#-------------------------------------------------------------------Method: CRT

if ($DoAll eq 'true' or grep({$_ eq 'CRT'} @Methods)){
	my $Data = $UA->get($URL{'CRT'});

	if ($Data->is_success()){
		my $JSON = decode_json(scalar($Data->decoded_content()));

		while (our $I <= length($JSON)){
			my $CurDomain = $JSON->[$I++]{name_value} =~ s/^\*\.//r;
			push(@AllDomains, split("\n", $CurDomain))
		}
	}else{
		Err(1, "Fetching domains via 'crt.sh' failed.")
	}
}

#---------------------------------------------------------------Method: Wayback

if ($DoAll eq 'true' or grep({$_ eq 'Wayback'} @Methods)){
	my $Data = $UA->get($URL{'Wayback'});

	if ($Data->is_success()){
		my $Domain;
		foreach (split("\n", $Data->decoded_content())){
			chomp(my $Domain = (split('/'))[2] =~ s/:[[:digit:]]+$//r);
			push(@AllDomains, $Domain) unless grep({$_ eq $Domain} @AllDomains)
		}
	}else{
		Err(1, "Fetching domains via 'web.archive.org' failed.")
	}
}

#---------------------------------------------------------------------Summarize

my $Old;
foreach (sort(@AllDomains)){
	next if $Old eq $_;
	print("$_\n");
	$Old = $_
}
