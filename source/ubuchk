#!/usr/bin/env perl

#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/ubuchk
# Started On        - Mon  3 Feb 18:22:57 GMT 2020
# Last Change       - Mon  3 Feb 22:25:42 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# A work-in-progress Perl rewrite and overhaul of `ubuntu-syschk`.
#
# Dependencies:
#
#   libtfl-perl (>= 2020-02-03)
#   perl (>= 5.22.1-9)
#------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use TFL 'FErr', 'Boolean', 'DepChk', 'YNInput', 'ReadFile', 'WriteFile';

no warnings 'uninitialized';

my $CurVer = '2020-02-03';

sub Usage{
	print(qq{            @{[uc($TFL::PROGNAME)]} ($CurVer)
		            $TFL::AUTHOR

		            ...

		SYNTAX:     $TFL::PROGNAME [OPTS]

		OPTS:       --help|-h|-?            - Display this help information.
		            --version|-v            - Output the version datestamp.
		            --config PATH           - Override default file.
		            --force-reset           - Force generation of config file.

		FILE:       ~/.config/$TFL::PROGNAME/config
		            ~/.config/$TFL::PROGNAME/kp_exclusions
	} =~ tr/\t//dr)
}

my (
	$ForceReset, $KernParams
);

my $MainDir = "$ENV{HOME}/.config/$TFL::PROGNAME";
my $ConfigFile = "$MainDir/config";
my $ParamExcepts = "$MainDir/kp_exclusions";

mkdir($MainDir) unless -d $MainDir;

while (defined($ARGV[0])){
	if ($ARGV[0] =~ '^(--help|-h|-\?)$'){
		Usage(); exit(0)
	}elsif ($ARGV[0] =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit(0)
	}elsif($ARGV[0] =~ '^(--config|-c)$'){
		shift();

		unless (length($ARGV[0]) > 0){
			FErr(1, __LINE__, "Option '--config|-c' requires a PATH.")
		}elsif (not -f -r $ARGV[0]){
			FErr(1, __LINE__, "Alternative configuration file missing or inaccessible.")
		}

		$ConfigFile = $ARGV[0]
	}elsif($ARGV[0] =~ '^(--force-reset|-F)$'){
		$ForceReset = 'true'
	}elsif ($ARGV[0] =~ '^-'){
		FErr(1, __LINE__, "Incorrect option(s) specified.")
	}else{
		last
	}

	shift()
}

unlink($ConfigFile) if $ForceReset eq 'true' and -f $ConfigFile;

if (-f -r -T $ConfigFile){
	foreach (ReadFile($ConfigFile)){
		next if length() <= 1 or /^#/;
		chomp(my ($Key, $Value) = split('='));

		if ($Key eq 'KernParams'){
			Boolean($Value);
			$KernParams = $Value
		}else{
			FErr(1, __LINE__, "Invalid key '$Key' detected.")
		}
	}
}else{
	WriteFile(
		$ConfigFile,
		qq{# User configuration file for `$TFL::PROGNAME` ($CurVer)

			KernParams=false
		} =~ tr/\t//dr
	);

	printf("File '~/.config/$TFL::PROGNAME/config' generated -- please restart.\n");
	exit(0)
}

sub Alert{ # Usage: [ALERT_ID] [STRING]
	printf("[A%0.4d]: %s\n", $_[0], $_[1])
}

#-------------------------------------------------------------Kernel Parameters

if ($KernParams eq 'true'){
	sub ChkParam{ # Usage: [FILE]
		my $ShowKey = $_[0] =~ tr/\//./r =~ s/\.proc\.sys\.//r;
		my $Value = ReadFile($_[0]);

		return($Value, $ShowKey)
	}

	foreach ( # [ALERT_ID] [TARGET_VALUE] [PATH]
		'1491:60:/proc/sys/vm/swappiness',
		'8852:0:/proc/sys/net/ipv4/conf/all/log_martians'
	){
		my ($AlertID, $TargetValue, $Path) = split(':');
		my ($Value, $ShowKey) = ChkParam($Path);

		Alert($AlertID, "Key '$ShowKey' assigned '$Value'.")
			if $Value == $TargetValue
	}
}
