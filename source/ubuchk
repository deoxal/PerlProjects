#!/usr/bin/env perl

#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/ubuchk
# Started On        - Mon  3 Feb 18:22:57 GMT 2020
# Last Change       - Mon  3 Feb 19:04:20 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# A work-in-progress Perl rewrite and overhaul of `ubuntu-syschk`.
#
# Dependencies:
#
#   libtfl-perl (>= 2020-02-03)
#   perl (>= 5.22.1-9)
#------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use TFL 'FErr', 'Boolean', 'DepChk', 'YNInput', 'ReadFile';

no warnings 'uninitialized';

my $CurVer = '2020-02-03';

sub Usage{
	print(qq{            @{[uc($TFL::PROGNAME)]} ($CurVer)
		            $TFL::AUTHOR

		            ...

		SYNTAX:     $TFL::PROGNAME [OPTS]

		OPTS:       --help|-h|-?            - Display this help information.
		            --version|-v            - Output the version datestamp.
		            --config PATH           - Override default file.
		            --force-reset           - Force generation of config file.
	} =~ tr/\t//dr)
}

my (
	$ForceReset
);

my $MainDir = "$ENV{HOME}/.config/$TFL::PROGNAME";
my $ConfigFile = "$MainDir/config";

mkdir($MainDir) unless -d $MainDir;

while (defined($ARGV[0])){
	if ($ARGV[0] =~ '^(--help|-h|-\?)$'){
		Usage(); exit(0)
	}elsif ($ARGV[0] =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit(0)
	}elsif($ARGV[0] =~ '^(--config|-c)$'){
		shift();

		unless (length($ARGV[0]) > 0){
			FErr(1, __LINE__, "Option '--config|-c' requires a PATH.")
		}elsif (not -f -r $ARGV[0]){
			FErr(1, __LINE__, "Alternative configuration file missing or inaccessible.")
		}

		$ConfigFile = $ARGV[0]
	}elsif($ARGV[0] =~ '^(--force-reset|-F)$'){
		$ForceReset = 'true'
	}elsif ($ARGV[0] =~ '^-'){
		FErr(1, __LINE__, "Incorrect option(s) specified.")
	}else{
		last
	}

	shift()
}

my %Index = (
	'Sets' => [
	],

	'Checks' => [
	],
);

# This is the correct number of keys, for which will later be checked.
my $ValidKeysTTL = @{$Index{'Sets'}} + @{$Index{'Checks'}};

unlink($ConfigFile) if $ForceReset eq 'true';

if (-f -r -T $ConfigFile){
	my $TTL = 0;
	foreach (ReadFile($ConfigFile)){
		next if length() <= 1 or /^#/;
		chomp(my ($Key, $Value) = split('='));

		# Tally up the total number of keys found, to check after below block.
		$TTL++;

		if ($Key eq 'KEY_NAME'){
		}else{
			FErr(1, __LINE__, "Invalid key '$Key' detected.")
		}
	}

	FErr(1, __LINE__, 'One or more keys are missing.') if $TTL < $ValidKeysTTL;
}else{
	open(my $FH, '>', $ConfigFile);

	print($FH qq{# User configuration file for `$TFL::PROGNAME` ($CurVer)

	} =~ tr/\t//dr);

	close($FH);
	printf("File '~/.config/$TFL::PROGNAME/config' generated -- please restart.\n");
	exit(0)
}
