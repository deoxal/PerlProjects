#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/cheater
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/cheater/cheater
# Started On        - Sun 22 Nov 20:45:37 GMT 2020
# Last Change       - Tue 29 Dec 01:29:24 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# With the blessing from Igor Chubin, author of 'cheat.sh' and associated
# repositories, I've written an alternative interface to the plentiful source
# of information over at Chubin's GitHub repository 'cheat.sheets'.
#
# If you'd like to add to Cheater, you can do so while also helping 'cheat.sh'.
# Simply submit your 'cheat sheets' to the 'cheat.sheets' repository.
#
# I wanted to use GitHub's API and its handy JSON output, but of course they
# heavily restrict it.
#
# Features:
#
# N/A
#
# Bugs:
#
#TODO: Cannot find any sheet existing sheets on Linux Mint 18.3 with Cinnamon.
#
#      "Failed to access sheet 'CMD' data via GitHub..." Where CMD is the sheet
#      it can't find.
#
# Dependencies:
#
#   libwww-perl (>= 6.31-1)
#   perl (>= 5.22.1-9)
#------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use LWP::UserAgent;
use Term::ANSIColor 'color';

no warnings 'uninitialized';

my $CurVer = '2020-12-29';
my $Progrm = 'cheater';

sub Usage {
	print(qq{Usage: $Progrm [OPTS] [SHEET_1 [SHEET_2] ...]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -C, --no-colors          - Disable ANSI color escape sequences.
		  -H, --highlight [REGEX]  - Highlight REGEX in the requested sheet(s).
		  -P, --no-pager           - Do not use less(1) or more(1) for paging.
	} =~ tr/\t//dr)
}

my $ShareDir = "/usr/share/$Progrm";
my $ExcludedFile = "$ShareDir/excluded_lines";

my $DirURL = 'https://github.com/chubin/cheat.sheets/tree/master/sheets';
my $RawURL = 'https://raw.githubusercontent.com/chubin/cheat.sheets/master/sheets';

my $Pad = ' ' x 4;
my ($NoPager, $PagerFound, %Colors, @AvailFiles, $Highlight, $NoColors);

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		print("$CurVer\n"); exit(0)
	} elsif ($ARGV[0] =~ '^(--no-color|-C)$') {
		$NoColors = 'True'
	} elsif ($ARGV[0] =~ '^(--no-pager|-P)$') {
		$NoPager = 'True'
	} elsif ($ARGV[0] =~ '^(--highlight|-H)$') {
		shift();

		if (length($ARGV[0]) == 0) {
			die("Missing REGEX")
		} else {
			$Highlight = $ARGV[0]
		}
	} elsif ($ARGV[0] =~ '^-') {
		die("Incorrect option(s) specified")
	} else {
		last
	}

	shift()
}

scalar(@ARGV) == 0 and die('Missing COMMAND to query');
-d $ShareDir or die("Directory '$ShareDir' not found");

unless ($NoColors eq 'True') {
	%Colors = (
		'desc' => color('bright_black'),
		'match' => color('bright_red'),
		'reset' => color('reset')
	);
} else {
	%Colors = (
		'desc' => '',
		'match' => '',
		'reset' => ''
	);
}

# Check for less and/or more in PATH, if is paging enabled.
my @Executables;
unless ($NoPager eq 'True') {
	foreach my $Dir (split(':', $ENV{'PATH'})) {
		opendir(my $DH, $Dir);
		push(@Executables, readdir($DH));
		closedir($DH)
	}
}

# Set the pager which is found, using more(1) as a fallback.
grep({$_ eq 'more'} @Executables) and $PagerFound = 'more';
grep({$_ eq 'less'} @Executables) and $PagerFound = 'less -R 2>&1';

# If we have to use more(1), die() if using colors; unsupported.
if ($PagerFound eq 'more') {
	$NoColors ne 'True' and die('Color not supported in more(1)')
}

# We cannot use highlighting while disabling colors.
if (length($Highlight) > 0 and $NoColors eq 'True') {
	die('Highlighting unavailable, because colors are disabled')
}

#-----------------------------------------------------Initialize LWP::UserAgent

my $UA = LWP::UserAgent->new(
	'agent' => 'Mozilla/5.0',
	'max_redirects' => 1,
	'protocols_allowed' => ['http', 'https'],
	'timeout' => 10
);

#----------------------------------------------Populate List of Lines to Ignore

my @Excludes;
if (-f $ExcludedFile) {
	-r $ExcludedFile or die("File '$ExcludedFile' unreadable");

	open(my $FH, '<', $ExcludedFile);

	while (<$FH>) {
		chomp();

		push(@Excludes, $_) unless (/^$/ or /^#/)
	}

	close($FH);
} else {
	die("File '$ExcludedFile' missing")
}

#----------------------------------------------------------Display the Sheet(s)

my ($ComStrip, @FinalLines);
foreach my $CurSheet (@ARGV) {
	my $HeaderSeen = 'False';

	my $Response;
	if ($CurSheet =~ '/') {
		# Using one of the '_*' subdirectories.
		my ($Left, $Right) = split('/', $CurSheet);
		$Response = $UA->get("$RawURL/_$Left/$Right")
	} else {
		$Response = $UA->get("$RawURL/$CurSheet")
	}

	if ($Response->is_success()) {
		foreach my $Line (split("\n", $Response->decoded_content())) {
			# This is of no consequence to us, as we're working differently.
			# This is a special line talked about between Chubin and
			# contributors, such as myself, which would contain parameters much
			# like Vim's modeline.
			$Line =~ /^# cheat.sh: / and next;

			# Ignore the first 'block' of comments, since we already know what
			# we chose. The short description would be nice to include, but
			# right now the database isn't ready for such an assumption.
			if ($HeaderSeen eq 'True') {
				if ($Line =~ /^# /) {
					unless ($NoColors eq 'True') {
						$ComStrip = $Line =~ s/^#\s*//r
					} else {
						# Using this same variable just because I'm being lazy.
						$ComStrip = $Line
					}

					# Some lines have to be ignored by Cheater, because they
					# aren't relevant to the way we're using the sheets.
					grep({$Line =~ /$_/} @Excludes) and next;

					# One here...
					if (length($Highlight) > 0 and $Line =~ /$Highlight/) {
						my $Replace = "$Colors{match}$&$Colors{desc}";
						$ComStrip = $ComStrip =~ s/$&/$Replace/rg
					}

					push(@FinalLines, "$Colors{desc}$ComStrip$Colors{reset}\n")
				} elsif ($Line =~ /^#$/) {
					unless ($NoColors eq 'True') {
						push(@FinalLines, "\n")
					} else {
						# Otherwise it might be a bit confusing.
						push(@FinalLines, "#\n")
					}
				} else {
					my $ElseLine = $Line;

					# ...and one here, to ensure we restore the right color.
					if (length($Highlight) > 0 and $ElseLine =~ /$Highlight/) {
						my $Replace = "$Colors{match}$&$Colors{reset}";
						$ElseLine = $ElseLine =~ s/$&/$Replace/rg
					}

					push(@FinalLines, "$ElseLine\n")
				}
			} else {
				if ($Line =~ /^# /) {
					next
				} elsif ($Line =~ /^$/) {
					$HeaderSeen = 'True'
				}
			}
		}

		# Ensures a newline between sheets.
		scalar(@ARGV) > 1 and push(@FinalLines, "\n")
	} else {
		die("Failed to access sheet '$CurSheet' data via GitHub")
	}
}

#------------------------------------Begin Displaying Lines & Remove Duplicates

unless ($NoPager eq 'True') {
	open(my $Pipe, "| $PagerFound");

	my $OldLine;
	foreach my $NewLine (@FinalLines) {
		$NewLine ne $OldLine and print($Pipe $NewLine);
		$OldLine = $NewLine
	}

	close($Pipe)
} else {
	my $OldLine;
	foreach my $NewLine (@FinalLines) {
		$NewLine ne $OldLine and print($NewLine);
		$OldLine = $NewLine
	}
}
