#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/tudu
#----------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/tudu
# Started On        - Sat 14 Dec 19:42:12 GMT 2019
# Last Change       - Wed 15 Jan 23:34:05 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Dependencies:
#
#   libtfl-perl (>= 2020-01-03)
#   libfile-listing-perl (>= 6.04-1)
#   liblist-moreutils-perl (>= 0.413-1build1)
#   libterm-readkey-perl (>= 2.33-1build1)
#----------------------------------------------------------------------------------

use v5.22.1;
use strict;
use warnings;
use autodie;
use TFL 'Err';
use File::Find;
use List::MoreUtils;
use Term::ReadKey 'GetTerminalSize';
use Term::ANSIColor 'color', 'colorvalid';

no warnings 'uninitialized', 'File::Find';

my $CurVer = "2020-01-15";

sub Usage{
	my $Info = qq{            @{[uc($TFL::PROGNAME)]} ($CurVer)
		            $TFL::AUTHOR

		            Configurable developer tool to overview projects' todos.

		SYNTAX:     $TFL::PROGNAME [OPTS] [REGEX]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --ignore-case|-i        - Case-insensitive search for REGEX.
		            --alt-path|-P PATH      - Override value in config with PATH.
		            --config PATH           - Override default file with PATH.
		            --force-reset           - Force regeneration of user's config.
		            --parseable             - Parseable output, similar to raw.

		NOTE:       Signifying the end of OPTS with '--' is supported.

		            When specifying an alternative PATH, it's possible and intended
		            that the user could provide a file, instead of a directory.

		            Where REGEX is a REGEX string to use to filter todo entries.

		            All binary files will be ignored, as will those for which
		            needed permissions are lacking.

		CONFIG:     A user configuration file (see below) will be generated when
		            the program is executed without such a file existing.

		            The default 'Target' is the current working directory, and the
		            default TODO string is '#TODO:', where '#' indicates a comment.

		            Once the 'config' file has been generated, adjust as needed.

		FILE:       ~/.config/$TFL::PROGNAME/config
	};

	print($Info =~ tr/\t//dr)
}

my (
	$Target, $Pretty, $DoCase, %ColorHash, %CharHash, $SolidTarget,
	$DoZPNums, $ForceReset, $Parseable, $FullPath, $TodoStr, $ShowTTL
);

# Snip the one whitespace before the todo entry.
my $TodoStrLen = length($TodoStr) + 1;

my $MainDir = "$ENV{HOME}/.config/$TFL::PROGNAME";
mkdir($MainDir) unless -d $MainDir;

my $TargetFile = "$MainDir/target";
my $ExcludeFile = "$MainDir/exclude";
my $ConfigFile = "$MainDir/config";

my @ValidKeys = (
	'Target', 'Pretty', 'TodoStr', 'Char_End', 'Char_Mid', 'Char_Bul',
	'DoZPNums', 'Color_Bullet', 'Color_EOL', 'Color_EndChar', 'RegexStr',
	'Color_FileName', 'Char_Ofl', 'Color_MidChar', 'Color_Numbers',
	'Color_TodoBody', 'Parseable', 'FullPath', 'ShowTTL', 'Color_TotalStr',
	'Color_TotalNum'
);

while(defined($ARGV[0])){
	my $Arg = $ARGV[0];

	if($Arg =~ /^--$/){
		last # <-- End of option processing.
	}elsif($Arg =~ '^(--help|-h|-\?)$'){
		Usage(1); exit 0
	}elsif($Arg =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit 0
	}elsif($Arg =~ '^(--ignore-case|-i)$'){
		$DoCase = 'i'
	}elsif($Arg =~ '^(--alt-path|-P)$'){
		shift(@ARGV);

		Err(1, "Option '--alt-path|-P' requires a PATH.")
			unless length($ARGV[0]) > 0;

		$Target = $ARGV[0];
		$SolidTarget = 'true'
	}elsif($Arg =~ '^(--config|-c)$'){
		shift(@ARGV);

		Err(1, "Option '--config|-c' requires a PATH.")
			unless length($ARGV[0]) > 0;

		$ConfigFile = $ARGV[0]
	}elsif($Arg =~ '^(--force-reset|-F)$'){
		$ForceReset = 'true'
	}elsif($Arg eq '--parseable'){
		$Parseable = 'true'
	}elsif($Arg =~ '^-'){
		Err(1, "Incorrect option(s) -- see: $TFL::PROGNAME -h")
	}else{
		last
	}

	shift(@ARGV)
}

if (scalar(@ARGV) > 1){
	Err(1, "Too many arguments -- see: $TFL::PROGNAME -h")
}elsif ($DoCase eq 'i' and scalar(@ARGV) == 0){
	Err(1, "Option '--ignore-case|-i' used, but no REGEX provided.")
}

# Use of this function is to avoid escaping issues in REGEX.
my $RegexStr = $ARGV[0];

my $TermCols = @{[GetTerminalSize()]}[0];

unlink($ConfigFile) if $ForceReset eq 'true';

# Read the `config` file, if found, then populate the config hash.
if (-f -r -T $ConfigFile){
	sub Boolean{
		Err(1, "Invalid boolean '$_[0]' detected.")
			unless $_[0] eq 'true' or $_[0] eq 'false'
	}

	open(my $FH, '<', $ConfigFile);
	my @Data = <$FH>;
	close($FH);

	foreach (@Data){
		next if length($_) <= 1 or $_ =~ '^#';
		chomp(my ($Key, $Value) = split('=', $_));

		# Iterate over ckeys to check they're valid.
		my $IsFound = 'true' if grep($Key, @ValidKeys);

		if ($IsFound eq 'true'){
			if ($Key eq 'Pretty'){
				Boolean($Value);
				$Pretty = $Value
			}elsif ($Key eq 'Target'){
				$Target = $Value unless $SolidTarget eq 'true'
			}elsif ($Key eq 'TodoStr'){
				$TodoStr = $Value
			}elsif ($Key eq 'RegexStr'){
				$RegexStr = $Value unless length($Value) == 0
			}elsif ($Key eq 'DoZPNums'){
				Boolean($Value);
				$DoZPNums = $Value
			}elsif ($Key eq 'ShowTTL'){
				Boolean($Value);
				$ShowTTL = $Value
			}elsif ($Key eq 'FullPath'){
				Boolean($Value);
				$FullPath = $Value
			}elsif ($Key eq 'Parseable'){
				next if $Parseable eq 'true';

				Boolean($Value);
				$Parseable = $Value
			}elsif ($Key =~ '^Char_.*'){
				next if $Pretty eq 'false' and $Key ne 'Char_Ofl';

				Err(1, "Key '$Key' equals too long a value.")
					if length($Value) > 1;

				$CharHash{$Key} = $Value
			}elsif ($Key =~ '^Color_.*'){
				$ColorHash{$Key} = $Value =~ tr/['"]//dr
			}else{
				Err(1, "Invalid color '$Value' detected.")
					unless colorvalid($Value);
			}
		}else{
			Err(1, "Invalid key '$Key' detected.")
		}
	}
}else{
	Err(1, "User configuration file could not be generated.")
		unless -w -x ($ConfigFile =~ m{(.*)(?:/.*)})[0];

	# Generate the default config.
	open(my $FH, '>', $ConfigFile);

	my $Contents = qq{# User configuration file for `$TFL::PROGNAME` ($CurVer)

		# Specify the location (file or directory) for $TFL::PROGNAME to use. If the CWD
		# is specified (the default value), the search is made non-recursively.
		Target=./

		# This string, assumed to have a whitespace either side of it, will be
		# looked for in each applicable line.
		TodoStr=#TODO:

		# If set to a value, it will always be used as REGEX. This could be handy
		# if you want to always view certain todo entries. This key, if used, will
		# override any REGEX string otherwise set.
		RegexStr=

		# If enabled, a message, tallying up todo entries found, is displayed.
		ShowTTL=true

		# Display text in an easy-to-parse way, overriding pretty keys shown below.
		Parseable=false

		# Display the full (absolute or relative) path to the current file. This
		# setting has no effect if the above `Parseable` key is enabled.
		FullPath=true

		# Zero-pad line numbers of each discovered todo entry.
		DoZPNums=false

		# When enabled, enable the display of extra ASCII characters. (see below)
		Pretty=false

		# Adjust the superfluous characters used, especially when 'Pretty=true'.
		Char_Bul=*
		Char_End=+
		Char_Mid=|

		# This will always be shown, unless specifically disabled.
		Char_Ofl=#

		# Various color keys and their values. To disable color support, simply
		# set each of these to null, by removing all of their values.
		Color_Bullet=white
		Color_EOL=bright_black
		Color_EndChar=white
		Color_FileName=bright_black
		Color_MidChar=white
		Color_Numbers=red
		Color_TodoBody=bright_white
		Color_TotalStr=white
		Color_TotalNum=white};

	printf($FH "%s\n", $Contents =~ tr/\t//dr);

	close($FH);
	printf("File '~/.config/$TFL::PROGNAME/config' generated -- please restart.\n");
	exit(0)
}

my $EntryTTL = 0;

# Read file ($_[0]) then output pretty and column-mindful list of todo entries.
# For now, we're dealing with one-liners only. Eventually, I'd like to see
# multi-line todo entries, but that will require some faffing about.
sub GetTodo{
	open(my $FH, '<', $_[0]);
	my $FileShown = $_[0] =~ s/$ENV{HOME}/\~/dr;

	my (@TodoList, $Valid);
	while (<$FH>){
		undef($Valid);
		chomp($_);

		# Skip empty lines, or lines with only trailing whitespaces, tabs, etc.
		next if $_ =~ /(^$|^#+ |^[[:space:]]+$)/;

		# Check each field in line for the todo string.
		$Valid = 'true' if grep(/^$TodoStr$/, split(' ', $_));

		if ($Valid eq 'true'){
			my $Todo = $_ =~ s/^.*$TodoStr //dr;
			my $TodoLen = length($Todo);

			$EntryTTL++;

			# If entry is too long, snip it with the overflow character.
			if ($Parseable ne 'true' and $TodoLen > $TermCols - 10){
				$Todo = substr($Todo, 0, $TermCols - ($TodoLen + 12)) .
					color($ColorHash{Color_EOL}) . $CharHash{Char_Ofl} .
					color('reset')
			}

			# Look for user-provided REGEX in line, if one is given.
			if (length($RegexStr) > 0){
				if ($DoCase eq 'i'){
					next unless grep(m/$RegexStr/i, $Todo)
				}else{
					next unless grep(m/$RegexStr/, $Todo)
				}
			}

			if ($Parseable ne 'true'){
				# Maximum line supported is 9,999,999. If an override feature is
				# requested, I'll probably get to adding that. If you have one file
				# of anything like that number, you probably should split it up.
				my $FNums;
				if ($DoZPNums eq 'true'){
					$FNums = ' %0.7d '
				}else{
					$FNums = ' %7d '
				}

				#TODO: Make it so the user can adjust the above number (padding).

				$FileShown = ($FileShown =~ m{(?:.*/)?(.*)})[0]
					if $FullPath eq 'false';

				push(
					@TodoList,
					sprintf(
						color($ColorHash{Color_Numbers}) . $FNums . color('reset') .
						color($ColorHash{Color_MidChar}) . "%s" . color('reset') .
						color($ColorHash{Color_TodoBody}) . " %s" . color('reset'),
						$., $CharHash{Char_Mid}, $Todo
					)
				)
			}else{
				push(@TodoList, sprintf("%s~~~%d~~~%s", $FileShown, $., $Todo))
			}
		}
	}

	close($FH);

	# Don't show anything if no todos were found.
	return(1) unless scalar(@TodoList) > 0;

	if ($Parseable ne 'true'){
		# To ensure the filenames don't flow over the coloumn limit.
		my $DirName = ($FileShown =~ m{(.*)(?:/.*)})[0] =~ s/.*\//...\//dr . '/';
		$FileShown = $DirName . ($FileShown =~ m{(?:.*/)(.*)})[0]
			if length($FileShown) > $TermCols - 2;

		printf(
			color($ColorHash{Color_Bullet}) . " %s " . color('reset') .
			color($ColorHash{Color_FileName}) . "%s" . color('reset') .
			color($ColorHash{Color_EndChar}) . "\n%10s\n" . color('reset'),
			$CharHash{Char_Bul}, ${FileShown}, $CharHash{Char_End}
		);

		printf(color($ColorHash{Color_MidChar}) . "%s\n" . color('reset'), $_)
			foreach @TodoList;

		printf(color($ColorHash{Color_EndChar}) . "%10s\n" .
			color('reset'), $CharHash{Char_End})
	}else{
		printf("%s\n", $_) foreach @TodoList;
	}
}

if (-d $Target){
	Err(1, 'Directory inaccessible.') unless -r -x $Target;

	our @FileArr;

	sub Conditions{
		my $Name = $File::Find::name;

		# Must be a readable non-binary file.
		return unless -f -r -T $Name;

		my @SplitName = split('/', $Name);
		foreach (@SplitName){
			return if $_ eq '.git'
		}

		push(@FileArr, $Name)
	}

	# Recursive search for files in `Target` per `Conditions()`.
	find(\&Conditions, $Target);

	foreach (@FileArr){GetTodo($_)}
}elsif (-f $Target){
	Err(1, 'File unreadable.') unless -r $Target;
	Err(1, 'File is binary.') if -r -B $Target;

	GetTodo($Target)
}else{
	Err(1, 'Non-existent or invalid target specified.')
}

if ($EntryTTL == 0){
	printf("Wonderful -- you have exactly nothing to do here.\n");

	exit(0)
}else{
	my $FormatStr = '%d';
	$FormatStr = '?/%d' if length($RegexStr) > 0;

	printf(
		"\n" . color($ColorHash{Color_TotalStr}) . " %s " .
		color($ColorHash{Color_TotalNum}) . "$FormatStr\n" . color('reset'),
		'Total:', $EntryTTL
	) unless $ShowTTL ne 'true'
}
