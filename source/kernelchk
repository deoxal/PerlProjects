#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/kernelchk
#----------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/kernelchk
# Started On        - Sun  5 May 13:15:29 BST 2019
# Last Change       - Wed 15 Jan 16:25:29 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Simpler Perl rewrite of the old shell kernelchk program also by TFL.
#----------------------------------------------------------------------------------

use v5.22.1;
use strict;
use warnings;
use autodie;
use File::Basename 'basename';
use TFL 'Err'; # <-- libtfl-perl (>= 2020-01-02)
use Gtk2::Notify -init, 'kernelchk'; # <-- libgtk2-notify-perl (>= 0.05-4build2)

no warnings 'uninitialized';

my $CurVer = "2020-01-15";
my $Progrm = basename($0);

my $ProcFile = '/proc/version';

sub Usage{
	my $Info = qq{            @{[uc($Progrm)]} ($CurVer)
		            Written by terminalforlife <terminalforlife\@yahoo.com>

		            Basic Perl check for a change in the Linux kernel version.

		SYNTAX:     $Progrm [OPTS]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --quiet|-q              - Don't output if versions don't match.
		            --set|-s                - Saves the current kernel version.
		            --notify|-N             - Send notification on version mis-match.

		NOTE:       If versions don't match, give an exit status of 2.

		            With a simple '-q' flag and then testing for ${Progrm}'s exit status, -
		            a mis-match can be very easily handled however the user sees fit.

		FILE:       ~/.config/$Progrm
		            $ProcFile
	};

	print($Info =~ s/\t//gr)
}

my ($Notify, $BeQuiet, $Set);

while($ARGV[0]){
	if($ARGV[0] =~ /^(--help|-h|-\?)$/){
		Usage; exit(0)
	}elsif($ARGV[0] =~ /^(--version|-v)$/){
		print("$CurVer\n"); exit(0)
	}elsif($ARGV[0] =~ /^(--quiet|-q)$/){
		$BeQuiet = 'true'
	}elsif($ARGV[0] =~ /^(--notify|-N)$/){
		$Notify = 'true'
	}elsif($ARGV[0] =~ /^(--set|-s)$/){
		$Set = 'true'
	}else{
		Err(1, "Incorrect argument(s) specified")
	}

	shift(@ARGV)
}

sub CheckFile{
	Err(1, "File '$_[0]' not found.") unless -f $_[0];
	Err(1, "Read access to '$_[0]' denied.") unless -r $_[0];
}

my $MainDir = "$ENV{HOME}/.config/$Progrm";
mkdir($MainDir) unless -d  $MainDir;

my $SavedFile = "$MainDir/saved";

# Get current version.
CheckFile($ProcFile);
open(my $FH, '<', $ProcFile);
my $Current = @{[split(' ', <$FH>)]}[2];
close($FH);

if($Set eq 'true'){
	open(my $FH, '>', $SavedFile);
	print($FH $Current);
	close($FH);

	exit(0)
}

# Get saved version.
CheckFile($SavedFile);
open($FH, '<', $SavedFile);
chomp(my $Saved = <$FH>);
close($FH);

printf("%-14s%-s\n%-14s%-s\n", 'CURRENT:', $Current, 'SAVED:', $Saved)
	unless $BeQuiet eq 'true';

exit(0) if $Current eq $Saved;

if($Notify){
	my $Text = 'Kernel version mis-match detected.';
	my $Notify = Gtk2::Notify->new($Text);
	$Notify->set_urgency('critical');
	$Notify->show()
}

exit(2)
