#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/apt-undo-install
#----------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/apt-undo-install
# Started On        - Tue 23 Apr 18:46:07 BST 2019
# Last Change       - Fri 31 Jan 23:32:38 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Dependencies:
#
#   apt (>= 1.2.32)
#   bsdmainutils (>= 9.0.6)
#   less (>= 481-2.1)
#   libapt-pkg-perl (>= 0.1.29build7)
#   libtfl-perl (>= 2020-01-03)
#   perl (>= 5.22.1-9)
#----------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use TFL 'FErr', 'DepChk';

no warnings 'uninitialized';

my $CurVer = "2020-01-31";

my $AptLogFile = '/var/log/apt/history.log';

sub Usage{
	print(qq{            @{[uc($TFL::PROGNAME)]} ($CurVer)
		            $TFL::AUTHOR

		            A Perl solution to undo recent APT installations.

		SYNTAX:     $TFL::PROGNAME [OPTS]

		OPTS:       --help|-h|-?            - Display this help information.
		            --version|-v            - Output the version datestamp.
		            --count|-c N            - Undo N number of installations.
		            --date|-d YYYY-MM-DD    - Specify by the installation date.
		            --logfile|-l FILE       - Specify an alternative logfile.
		            --output-only:F         - Just list installed packages.
		            --time|-t HH:MM:SS      - Specify by the installation time.
		            --view|-V               - View the contents of the logfile.

		            Remaining options are passed over to apt-get.

		NOTE:       The '--date|-d' and '--time|-t' options may fail to work
		            with your APT logfile if you're using non-standard
		            localisation settings for an English-speaker. These flags
		            should also not be used with the '--count|-c' flag.

		            The following output formats are as follows:

		              --output-only:col, --output-only:desc, --output-only:list

		EXAMPLE:    $TFL::PROGNAME --purge --autoremove -c 2
		            $TFL::PROGNAME -l /tmp/history.log --output-only:list
		            $TFL::PROGNAME --date 2017-00-00 --time 20:00:00

		FILE:       $AptLogFile
	} =~ tr/\t//dr)
}

my $TimesExec = 1;

my (
	$OutputFormat, $ToAssume, $ViewLog, $OutOnly,
	$BeQuiet, $ToSim, $FiltaDate, $FiltaTime
);

while(defined($ARGV[0])){
	if($ARGV[0] =~ '^(--help|-h|-\?)$'){
		Usage(); exit(0)
	}elsif($ARGV[0] =~ '^(--version|-v)$'){
		print($CurVer . "\n"); exit(0)
	}elsif($ARGV[0] =~ '^(--logfile|-l)$'){
		shift();

		if (length($ARGV[0]) == 0){
			FErr(1, __LINE__, "Option '--logfile|-l' requires a file.")
		}elsif (not -f $ARGV[0] and not -r $ARGV[0]){
			FErr(1, __LINE__, "Unable to find or read APT's logfile.")
		}

		$AptLogFile = $ARGV[0]
	}elsif($ARGV[0] =~ '^--view|-V$'){
		$ViewLog = 1
	}elsif($ARGV[0] =~ '^(--date|-d)$'){
		shift();

		FErr(1, __LINE__, "Invalid date specified.")
			unless $ARGV[0] =~ '^[0-9]+-[0-9]+-[0-9]+$';

		$FiltaDate = $ARGV[0]
	}elsif($ARGV[0] =~ '^(--time|-t)$'){
		shift();

		FErr(1, __LINE__, "Invalid time specified.")
			unless $ARGV[0] =~ '^[0-9]+:[0-9]+:[0-9]+$';

		$FiltaTime = $ARGV[0]
	}elsif($ARGV[0] =~ '^(--count|-c)$'){
		shift();

		FErr(1, __LINE__, "Invalid count specified.")
			unless $ARGV[0] =~ '^[0-9]+$';

		$TimesExec = $ARGV[0]
	}elsif($ARGV[0] =~ '^--output-only:(desc|list|col)$'){
		$OutputFormat = substr($ARGV[0], 14);
		$OutOnly = 1
	}elsif($ARGV[0] =~ '^-'){
		last # <-- Pass over to apt-get.
	}else{
		FErr(1, __LINE__, "Unrecognised argument(s) specified.")
	}

	shift()
}

DepChk('apt-get', 'column', 'less');

if($ViewLog){
	system(qq{less "$AptLogFile"});
	exit(0)
}

open(my $FH, '<', $AptLogFile);
my @Data = <$FH>;
close($FH);

my $InstallWC = 0;
my @InstallOnlyLines;
foreach (@Data){
	next unless $_ =~ '^Install:';

	push(@InstallOnlyLines, $_);
	$InstallWC++
}

FErr(1, __LINE__, "Cannot undo greater than the available $InstallWC time(s).")
	if $TimesExec > $InstallWC;

my @InstalledPKGs;
if($FiltaDate and $FiltaTime){
	my $SeenDate = 'false';
	my $Count = 0;
	my @CurLine;

	foreach my $Buffer (@Data){
		next if length($Buffer) <= 1;
		@CurLine = split(" ", $Buffer);

		if($CurLine[0] eq "Start-Date:"){
			if($CurLine[1] eq $FiltaDate and $CurLine[2] eq $FiltaTime){
				$SeenDate = 'true';
				$Count = 0
			}
		}

		$Count++ if $SeenDate eq 'true';
		next unless $Count == 4 and $CurLine[0] eq 'Install:';

		foreach (@CurLine){
			push(@InstalledPKGs, $_) unless $_ =~ '^(Install:|.*[\(\)].*)'
		}

		last
	}

	FErr(1, __LINE__, "Invalid time and/or date specified.")
		unless @InstalledPKGs
}elsif(not($FiltaDate and $FiltaTime) and ($FiltaDate or $FiltaTime)){
	FErr(1, __LINE__, "Options '--date|-d' and '--time|-t' come as a pair.")
}else{
	my $DesiredIndices = $InstallWC - $TimesExec;
	foreach ($DesiredIndices..$InstallWC){
		next unless $InstallOnlyLines[$_]; # <-- Avoids empty line errors.

		foreach (split(" ", $InstallOnlyLines[$_])){
			push(@InstalledPKGs, $_)
				unless $_ =~ '^(Install:|.*[\)\(].*|automatic)$'
		}
	}
}

unless($OutOnly){
	system(
		"apt-get @ARGV remove -o Dpkg::Progress-Fancy=true" .
		" -o Dpkg::Progress=true @InstalledPKGs"
	)
}else{
	if($OutputFormat eq 'desc'){
		use AptPkg::Cache;

		my $Cache = AptPkg::Cache->new();
		my $Descs = $Cache->packages('DescriptionList');
		foreach(@InstalledPKGs){
			my $Gets = $Cache->get($_);
			my $Name = $Gets->{'FullName'};
			my $Desc = $Descs->lookup("$_")->{'ShortDesc'};
			printf("%s - %s\n", $Name, $Desc)
		}
	}elsif($OutputFormat eq 'col'){
		system("printf '%s\n' @InstalledPKGs | column")
	}elsif($OutputFormat eq 'list'){
		print("$_\n") foreach @InstalledPKGs
	}
}
