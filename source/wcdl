#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/wcdl
#----------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/wcdl (Wallpaperscraft Downloader)
# Started On        - Sat 27 Apr 18:54:48 BST 2019
# Last Change       - Wed 15 Jan 16:26:39 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# NOTE: The web pages use UTF-8 encoding.
#----------------------------------------------------------------------------------

#TODO: Add a preview feature. Use ImageMagick.

use strict;
use warnings;
use autodie;
use TFL 'FErr'; # <-- libtfl-perl (>= 2020-01-03)
use LWP::Simple; # <-- libwww-perl (6.15-1)
use LWP::UserAgent; # <-- libwww-perl (6.15-1)
use Image::Magick; # <-- libimage-magick-perl (>= 8:6.8.9.9-7)
use List::MoreUtils 'uniq'; # <-- liblist-moreutils-perl (>= 0.413-1build1)
use X11::Protocol; # <-- libx11-protocol-perl (>= 0.56-7)
use Term::ANSIColor 'GREEN', 'RED', 'BOLD', 'RESET', 'YELLOW';
use File::Basename 'dirname', 'basename';
use File::Path 'make_path';
use File::Temp;
use POSIX 'ceil';

my $CurVer = "2020-01-15";

my $Domain = 'https://wallpaperscraft.com';
my $GHURL = "https://github.com/terminalforlife/$TFL::PROGNAME/raw/master/version";
my $LocalDir = "$ENV{HOME}/.local/share/$TFL::PROGNAME";
my $CacheDir = "$LocalDir/cache";
my $CacheCats = "$CacheDir/categories";
my $CachePages = "$CacheDir/pages";
my $HomePage = "$CacheDir/homepage";

sub Usage{
	print(qq{            @{[uc($TFL::PROGNAME)]} ($CurVer)
		            Written by terminalforlife <terminalforlife\@yahoo.com>

		            Extensive Perl downloader for Wallpaperscraft.

		SYNTAX:     $TFL::PROGNAME [OPTS] [CATEGORY] [PAGE]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --colorless             - Don't color output with escape sequences.
		            --links-only|-O         - Just output the direct download links.
		            --show-categories       - List categories, images, and pages.
		            --show-resolutions      - List the site's available resolutions.
		            --resolution|-r XY      - Where XY is, for example: '1920x1080'
		            --filter|-f TAG         - Omit images not matching TAG.
		            --dest|-D PATH          - Specify where the files will be saved.
		            --png|-p                - Save image in PNG format, instead of JPG.
		            --no-cache|-N           - Run without using or keeping cache.
		            --repopulate            - Repopulate all processed cache files.
		            --clobber               - Overwrite ALL processed image files.

		NOTE:       Page numbers can be given in ranges, or single digits, as shown below.

		DISPLAY:    By default, $TFL::PROGNAME will try to detect the current display resolution.

		            If you're using a multi-monitor setup, only the first discovered
		            (connected) display will be processed; in this case, you might be
		            better off picking your resolution manually, with the
		            '--resolution|-r' flags.

		EXAMPLE:    $TFL::PROGNAME -D ~/Downloads -N nature '2 8 10'
		            $TFL::PROGNAME --links-only abstract '1 3 8 10-24 105'
		            $TFL::PROGNAME --repopulate --clobber -O cars 1-5
		            $TFL::PROGNAME -O -f cat -f snow animals 1-100

		SITE:       $Domain
	} =~ s/\t//gr)
}

my $Resolution = '';
my $Destination = './';
my $Color = 1;
my $Clobber = 0;
my $SaveAsPNG = 0;
my $Repopulate = 0;
my $LinksOnly = 0;
my $ListCats = 0;
my $NoCache = 0;
my $Filter = 0;
my @FilterMatch;
my $ShowRes = 0;

while (defined($ARGV[0])){
	if ($ARGV[0] =~ '^(--help|-h|-\?)$'){
		Usage(); exit(0)
	}elsif ($ARGV[0] =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit(0)
	}elsif ($ARGV[0] =~ '^--colorless$'){
		$Color = 0
	}elsif ($ARGV[0] =~ '^(--links-only|-O)$'){
		$LinksOnly = 1
	}elsif ($ARGV[0] =~ '^--show-categories$'){
		$ListCats = 1
	}elsif ($ARGV[0] =~ '^--show-resolutions$'){
		$ShowRes = 1
	}elsif ($ARGV[0] =~ '^(--resolution|-r)$'){
		shift(@ARGV);

		if ($ARGV[0] =~ '^[0-9]+x[0-9]+$'){
			$Resolution = $ARGV[0]
		}else{
			FErr(1, __LINE__, "Invalid resolution chosen.")
		}
	}elsif ($ARGV[0] =~ '^(--filter|-f)$'){
		shift(@ARGV);

		$Filter = 1;
		push(@FilterMatch, $ARGV[0])
	}elsif ($ARGV[0] =~ '^(--png|-p)$'){
		$SaveAsPNG = 1
	}elsif ($ARGV[0] =~ '^(--dest|-D)$'){
		shift(@ARGV);

		if (-d $ARGV[0]){
			if ($ARGV[0] !~ '/$'){
				$Destination = $ARGV[0] . '/'
			}else{
				$Destination = $ARGV[0]
			}
		}else{
			FErr(1, __LINE__, "Directory not found.")
		}
	}elsif ($ARGV[0] =~ '^--repopulate$'){
		$Repopulate = 1
	}elsif ($ARGV[0] =~ '^--clobber$'){
		$Clobber = 1
	}elsif ($ARGV[0] =~ '^(--no-cache|-N)$'){
		$NoCache = 1
	}elsif ($ARGV[0] =~ '^-'){
		FErr(1, __LINE__, "Incorrect argument(s) specified")
	}else{
		last
	}

	shift(@ARGV)
}

#--------------------------------------------------------------------------UA SETUP

my $UA = LWP::UserAgent->new();
$UA->max_redirect(1);
$UA->timeout(10);
$UA->protocols_allowed(['http', 'https']);
$UA->agent('Mozilla/5.0');

#-----------------------------------------------------------------PRIMARY FUNCTIONS

my $TempFile; # <-- Set scope here, for later cleanup.
sub DLPage{
	if (not $NoCache){
		if (not $Repopulate and -f $_[0]){
			return(1)
		}elsif ($Repopulate or not -f $_[0]){
			my $DIR = dirname($_[0]);
			make_path($DIR) unless -d $DIR;

			# Extra -f condition because file doesn't always exist.
			unlink($_[0]) if $Repopulate and -f $_[0];

			open(my $FH, '>:encoding(UTF-8)', $_[0]);

			my $Data = $UA->get($_[1]);
			if ($Data->is_success()){
				print($FH $Data->decoded_content())
			}else{
				unlink($_[0]);

				FErr(1, __LINE__, "Unable to fetch and cache page data.")
			}

			close($FH)
		}
	}elsif ($NoCache){
		# Ignoring the first index to ensure no cache overwrites.

		FErr(1, __LINE__, "Told to repopulate, but '--no-cache|N' is enabled")
			if $Repopulate;

		my $FH = File::Temp->new(UNLINK => 0, SUFFIX => '_{$TFL::PROGNAME}.tmp');
		binmode($FH, ':utf8'); # <-- Ensure temp file uses UTF-8 encoding.
		$TempFile = $FH->filename();

		my $Data = $UA->get($_[1]);
		if ($Data->is_success()){
			print($FH $Data->decoded_content())
		}else{
			unlink($_[1]);

			FErr(1, __LINE__, "Unable to fetch page data.")
		}

		close($FH)
	}
}

sub DL_IMAGE{
	return(1) if -f $_[0] and not $Clobber;

	open(my $FH, '>', $_[0]);

	my $Data = $UA->get($_[1]);
	if ($Data->is_success()){
		print($FH $Data->decoded_content());
	}else{
		if ($Color){
			print(BOLD . RED . "[!]" . RESET);
		}else{
			print("[!]");
		}

		unlink($_[0]);
		return(1)
	}

	close($FH);

	if ($SaveAsPNG){
		my $ImageObj = Image::Magick->new();
		$ImageObj->Read($_[0]);
		$ImageObj->Write($_[0] =~ s/\.jpg$/.png/r);
		unlink($_[0]) # <-- Remove the original after conversion.
	}
}

#--------------------------------------------------------------RESOLUTION DETECTION

if (length($Resolution) == 0){
	my $X11 = X11::Protocol->new();
	my $X = $X11->{screens}[0]{width_in_pixels};
	my $Y = $X11->{screens}[0]{height_in_pixels};
	$Resolution = $X . 'x' . $Y
}

#------------------------------------------------------CATEGORY & HOMEPAGE HANDLING

DLPage($HomePage, $Domain);
open(my $FH, '<:encoding(UTF-8)', $HomePage);

my %CatNums;
my @Resolutions;
while (<$FH>){
	chomp();

	# Generate hash keys and their numeric values.
	if ($_ =~ /class="filter__count"/){
		my @Line = split('<', $_);
		my $Category = $Line[0] =~ s/(\s+|<.*$)//r;

		if ($Category !~ /60 Favorites$/){
			# Site not updated URL after name change.
			$Category = 'hi-tech' if $Category eq "Technologies";

			my $NUM = $Line[1] =~ s/^.*>//gr;
			$CatNums{lc($Category) =~ s/\s/_/gr} = $NUM
		}
	}elsif ($_ =~ /value="[0-9]+x[0-9]+"/){
		my @Line = split(' ', $_);
		push(@Resolutions, $Line[1] =~ s/("|value=)//gr)
	}
}

close($FH);
unlink($TempFile) if $NoCache;

if ($ShowRes){
	print("$_\n") foreach @Resolutions;
	exit(0)
}

if ($ListCats){
	if ($Color){
		printf(
			BOLD . GREEN . "%-14s %s %s\n" . RESET,
			"CATEGORY", "IMAGES", "PAGES"
		);
	}else{
		printf("%-14s %s %s\n", "CATEGORY", "IMAGES", "PAGES");
	}

	foreach (keys(%CatNums)){
		my $PAGE_TTL = ceil($CatNums{$_});

		printf(
			"%-14s %6d %d\n",
			$_, $CatNums{$_},
			ceil($PAGE_TTL / 15)
		)
	}

	exit(0)
}

if ($ARGV[0] and not exists($CatNums{$ARGV[0]})){
	FErr(1, __LINE__, "Invalid category provided.")
}

#--------------------------------------------------------------PROCESS PAGE NUMBERS

my @PAGES;
unless ($ARGV[1]){
	FErr(1, __LINE__, "At least one (non-0) page must be provided.")
}else{
	my @PAGE_NUM_LIST = split(' ', $ARGV[1]);
	foreach (@PAGE_NUM_LIST){
		if ($_ =~ /^([1-9]|[1-9][0-9]+)$/){
			push(@PAGES, $_)
		}elsif ($_ =~ /^[0-9]+-[0-9]+$/){
			# Process ranges, like 1-4, which would output '1 2 3 4'.
			my ($START, $END) = split('-', $_);
			my @NUMS = ($START..$END);
			push(@PAGES, $_) foreach @NUMS
		}else{
			FErr(1, __LINE__, "Invalid page number detected.")
		}
	}
}

#-----------------------------------------------------------------IMAGE DOWNLOADING

my $DL_LINK = 'https://images.wallpaperscraft.com/image';

foreach (@PAGES){
	my $DLFH;

	# Check the user didn't enter too high a page number, by deviding the total
	# number of images (hence the hash) for the chosen category, by 15. Must round
	# up with `ceil()` (`POSIX`), as the final page may display 1-15 images.
	my $TOTAL_IMAGES_INTO_PAGES = ceil($CatNums{$ARGV[0]} / 15);

	FErr(1, __LINE__, "Page '$_' is out of range.")
		if $_ > $TOTAL_IMAGES_INTO_PAGES;

	if (length($Resolution) > 0){
		my $FoundRes = 0;
		foreach (@Resolutions){
			if ($_ eq $Resolution){
				$FoundRes = 1;
				last
			}
		}

		FErr(1, __LINE__, "Resolution not supported.") unless $FoundRes
	}

	DLPage("$CacheCats/$ARGV[0]/$Resolution/$_", "$Domain/catalog/$ARGV[0]/page$_");

	if (not $NoCache){
		open($DLFH, '<:encoding(UTF-8)', "$CacheCats/$ARGV[0]/$Resolution/$_");
	}elsif ($NoCache){
		open($DLFH, '<:encoding(UTF-8)', "$TempFile");
	}

	my ($ID, $TagsID, $FullLink);

	while (<$DLFH>){
		chomp();

		if ($_ =~ /src="https:/ and $_ =~ /class="wallpapers__image"/){
			my @Line = split(' ', $_);

			$TagsID = $Line[2] =~ s/(^src=".*\/|"|_[0-9]+x[0-9]+\.jpg"$)//gr;
			$ID = $TagsID =~ s/^.*_//gr;
			$FullLink = "$DL_LINK/${TagsID}_$Resolution.jpg";

			# For the --filter|-f feature. Multiple of these flags can be used to
			# further narrow down the desired image.
			if ($Filter){
				my $FilterCount = 0;
				my $TAGS = $TagsID =~ s/_[0-9]+$//r;
				foreach (@FilterMatch){
					if ($TAGS !~ /$_/){
						next
					}else{
						$FilterCount += 1
					}
				}

				# If the total number of matches equal the amount of array
				# indices, in a human-readable way, then skip to the next image.
				next if $FilterCount < $#FilterMatch + 1
			}

			if ($LinksOnly){
				print("$FullLink\n")
			}else{
				if ($Color){
					print(
						BOLD . YELLOW . "FILE:" . RESET .
						" '${TagsID}_$Resolution.jpg' "
					);
				}else{
					print("FILE: '${TagsID}_$Resolution.jpg' ");
				}

				DL_IMAGE("$Destination/${TagsID}_$Resolution.jpg", $FullLink);
				print("\n")
			}
		}
	}

	unlink($TempFile) if $NoCache
}
