#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/getip
#--------------------------------------------------------------------------
# Project Name      - PerlProjects/source/getip
# Started On        - Wed  8 May 14:35:49 BST 2019
# Last Change       - Sun  1 Nov 18:51:12 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#--------------------------------------------------------------------------
# Dependencies:
#
#   libnet-address-ip-local-perl (>= 0.1.2-3)
#   libwww-perl (>= 6.15-1)
#   perl (>= 5.22.1-9)
#------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;

no warnings 'uninitialized';

my $CurVer = "2020-11-01";
my $Progrm = 'getip';

my $Domain = 'https://whatismyipaddress.com';

sub Usage {
	print(qq{Usage: $Progrm [OPTS]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -I, --ip-only            - Show only the IP address.
		  -e, --external           - Omit the internal IP address.
		  -i, --internal           - Omit the external IP address.
	} =~ tr/\t//dr)
}

my $Internal = 'true';
my $External = 'true';
my $IntExtDetected = 0;
my $IntStr = 'Internal IP: ';
my $ExtStr = 'External IP: ';

while (defined($ARGV[0])) {
	if ($ARGV[0] =~ '^(--help|-h|-\?)$') {
		Usage(); exit(0)
	} elsif ($ARGV[0] =~ '^(--version|-v)$') {
		print("$CurVer\n"); exit(0)
	} elsif ($ARGV[0] =~ '^(--internal|-i)$') {
		$IntExtDetected++; $Internal = 'true'; $External = 'false'
	} elsif ($ARGV[0] =~ '^(--external|-e)$') {
		$IntExtDetected++; $Internal = 'false'; $External = 'true'
	} elsif ($ARGV[0] =~ '^(--ip-only|-I)$') {
		$IntStr = ''; $ExtStr = ''
	} else {
		die("Incorrect option(s) specified")
	}

	shift()
}

$IntExtDetected == 2 and die("Either '--internal|-i' or '--external|-e'");

if ($Internal eq 'true') {
	use Net::Address::IP::Local;

	print($IntStr . Net::Address::IP::Local->public() . "\n")
}

if ($External eq 'true') {
	use LWP::UserAgent;

	my $UA = LWP::UserAgent->new(
		'agent' => 'Mozilla/5.0',
		'max_redirect' => 1,
		'protocols_allowed' => ['http', 'https'],
		'timeout' => 3
	);

	my $Data = $UA->get($Domain);

	$Data->is_success() == 0 or die('Failed to acquire external IP address');

	foreach (split("\n", $Data->decoded_content())) {
		foreach (split(' ')) {
			/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]/ or next;

			print($_ =~ s/(.*)<\/span>$/$ExtStr$1/r . "\n");

			exit(0)
		}
	}
}
