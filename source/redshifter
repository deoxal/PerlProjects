#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/redshifter
#----------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/redshifter
# Started On        - Fri 19 Apr 23:05:28 BST 2019
# Last Change       - Tue 28 Jan 15:34:24 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# Dependencies:
#
#   libtfl-perl (>= 2020-01-03)
#----------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use TFL 'Err', 'DepChk';

no warnings 'uninitialized';

my $CurVer = "2020-01-28";

sub Usage{
	print(qq{            @{[uc($TFL::PROGNAME)]} ($CurVer)
		            $TFL::AUTHOR

		            Quality-of-life Perl wrapper for redshift.

		SYNTAX:     $TFL::PROGNAME [OPTS] [ACTION]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.

		ACTIONS:    lower N                 - Lower the current gamma by N.
		            set N                   - Manually set the gamma to N.
		            raise N                 - Raise the current gamma by N.
		            reset                   - Reset to the default of 6500.

		FILE:       ~/.config/redshifter.tmp
	} =~ tr/\t//dr)
}

Err(1, "At least one argument is required.") if $#ARGV == -1;

while (defined($ARGV[0])){
	if ($ARGV[0] =~ '^(--help|-h|-\?)$'){
		Usage(1); exit(0)
	}elsif ($ARGV[0] =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit(0)
	}elsif ($ARGV[0] =~ '^-'){
		Err(1, "Incorrect option(s) specified.")
	}else{
		last
	}

	shift(@ARGV)
}

DepChk('redshift');

my ($Temp, $GammasNow);
my $Buffer = "$ENV{HOME}/.config/redshifter.tmp";

mkdir("$ENV{HOME}/.config") unless -d "$ENV{HOME}/.config";

sub GetSetValue{ # Usage: {[<] | [>]} [GAMMA_INT]
	open(my $FH, $_[0], $Buffer);

	print($FH "$_[1]\n") if $_[0] eq '>';
	chomp($GammasNow = <$FH>) if $_[0] eq '<';

	close($FH)
}

# Get current value if file available, else set default value.
GetSetValue('<') ? -f -r -w $Buffer : GetSetValue('>', 6500);

# Parse ACTIONS.
while (defined($ARGV[0])){
	if($ARGV[0] eq 'set'){
		shift();

		GetSetValue('>', $ARGV[0]);
		system("redshift -o -O $ARGV[0]K 1> /dev/null")
	}elsif($ARGV[0] eq 'reset'){
		GetSetValue('>', '6500');
		system('redshift -o -O 6500K 1> /dev/null')
	}elsif($ARGV[0] eq 'raise'){
		shift();

		$Temp = $GammasNow + $ARGV[0];

		Err(1, "Gamma setting '25000' is the highest.") unless $Temp <= 25000;

		GetSetValue('>', $Temp);
		system("redshift -o -O ${Temp}K 1> /dev/null")
	}elsif($ARGV[0] eq 'lower'){
		shift();

		$Temp = $GammasNow - $ARGV[0];

		Err(1, "Gamma setting '1000' is the lowest.") unless $Temp >= 1000;

		GetSetValue('>', $Temp);
		system("redshift -o -O ${Temp}K 1> /dev/null")
	}else{
		Err(1, "Incorrect action(s) specified.")
	}

	shift(@ARGV)
}
