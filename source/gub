#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/gub
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/gub
# Started On        - Mon 16 Mar 03:18:44 GMT 2020
# Last Change       - Mon 16 Mar 16:42:35 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Administrative utility to [g]rab various [b]its of [u]ser information. This
# is still more or less skeletal. I'd like to add more features to this, as it
# is kind of bland right now, but as it is, I can see it being somewhat useful.
#
# Features:
#
#TODO: Approach HOME usage without du(1) command.
#
# Bugs:
#
# N/A
#
# Dependencies:
#
#   libtfl-perl (>= 2020-01-03)
#   perl (>= 5.22.1-9)
#------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use TFL 'Err';

no warnings 'uninitialized';

my $CurVer = '2020-03-16';

sub Usage{
	print(qq{Usage: $TFL::PROGNAME [OPTS] [USER]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
	} =~ tr/\t//dr)
}

my $BashAliases = '<N/A>';
my $BashFunctions = '<N/A>';
my $BashHistory = '<N/A>';
my $BashRC = '<N/A>';
my $DeadLetter = '<N/A>';
my $EGID = '<N/A>';
my $EUID = '<N/A>';
my $GID = '<N/A>';
my $HomeDir = '<N/A>';
my $HomeSize = '<N/A>';
my $Name = '<N/A>';
my $Profile = '<N/A>';
my $SAAS = '<N/A>';
my $SSHDir = '<N/A>';
my $Shell = '<N/A>';
my $UID = '<N/A>';
my $XAuthority = '<N/A>';
my $XSessionErrs = '<N/A>';

while (defined($ARGV[0])){
	if ($ARGV[0] =~ '^(--help|-h)$'){
		Usage(); exit(0)
	}elsif ($ARGV[0] =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit(0)
	}elsif ($ARGV[0] =~ '^-'){
		Err(1, "Incorrect option(s) specified.")
	}else{
		last
	}

	shift()
}

Err(1, 'Missing USER argument.') unless length($ARGV[0]) > 0;

my $Target = $ARGV[0];
my $PwdFile = '/etc/passwd';

open(my $FH, '<', $PwdFile);

my $Found;
while (<$FH>){
	chomp(my @Line = split(':'));

	if ($Line[0] eq $Target){
		$Found = 'true';

		$UID = $Line[2];
		$GID = $Line[3];
		$HomeDir = $Line[5];
		$Shell = $Line[6];
		$Name = (split(',', $Line[4]))[0];
	}
}

close($FH);

Err(1, 'Unable to find USER.') unless $Found eq 'true';

my ($HomeMode, $HomeOwner, $HomeGroup) = (stat($HomeDir))[2,4,5];
$HomeMode = sprintf('%04o', $HomeMode & 07777);

if (-x $HomeDir){
	chomp($HomeSize = (split(' ', `du -sh '$HomeDir' 2> /dev/null`))[0]);

	if (-f "$HomeDir/.bash_functions"){
		$BashFunctions = 'true'
	}else{
		$BashFunctions = 'false'
	}

	if (-f "$HomeDir/.bash_history"){
		$BashHistory = 'true'
	}else{
		$BashHistory = 'false'
	}

	if (-f "$HomeDir/.bash_aliases"){
		$BashAliases = 'true'
	}else{
		$BashAliases = 'false'
	}

	if (-f "$HomeDir/.profile"){
		$Profile = 'true'
	}else{
		$Profile = 'false'
	}

	if (-f "$HomeDir/.bashrc"){
		$BashRC = 'true'
	}else{
		$BashRC = 'false'
	}

	if (-f "$HomeDir/.sudo_as_admin_successful"){
		$SAAS = 'true'
	}else{
		$SAAS = 'false'
	}

	if (-f "$HomeDir/.xsession-errors"){
		$XSessionErrs = 'true'
	}else{
		$XSessionErrs = 'false'
	}

	if (-f "$HomeDir/.Xauthority"){
		$XAuthority = 'true'
	}else{
		$XAuthority = 'false'
	}

	if (-f "$HomeDir/dead.letter"){
		$DeadLetter = 'true'
	}else{
		$DeadLetter = 'false'
	}

	if (-d "$HomeDir/.ssh"){
		$SSHDir = 'true'
	}else{
		$SSHDir = 'false'
	}
}

print(qq{      Target_User: $Target
        Full_Name: $Name

     Real_User_ID: $UID
    Real_Group_ID: $GID

            Shell: $Shell

         Home_Dir: $HomeDir
        Home_Mode: $HomeMode
        Home_Size: $HomeSize
       Home_Group: $HomeGroup
       Home_Owner: $HomeOwner

          Bash_RC: $BashRC
          Profile: $Profile
     Bash_Aliases: $BashAliases
     Bash_History: $BashHistory
   Bash_Functions: $BashFunctions

          SSH_Dir: $SSHDir
      Dead_Letter: $DeadLetter
      X_Authority: $XAuthority
    Sudo_as_Admin: $SAAS
 X_Session_Errors: $XSessionErrs
} =~ tr/\t//dr)
