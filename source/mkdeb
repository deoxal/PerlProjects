#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/mkdeb
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/mkdeb
# Started On        - Wed  1 May 23:27:08 BST 2019
# Last Change       - Sat  1 Feb 00:59:38 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# WARNING: Experimental work-in-progress. USE AT YOUR OWN RISK.
#
# Even when/if this is finished, it's going to be more for personal use, unless
# it evolves into something more. I build a lot of DEB packages, hence this.
#
# Dependencies:
#
#   libtfl-perl (>= 2020-01-03)
#------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use File::Basename 'dirname', 'basename';
use TFL 'FErr', 'DepChk', 'KeyDef', 'KeyVal';
use POSIX 'setuid', 'setgid';
use File::Copy 'copy';
use File::Path 'make_path';

my $CurVer = "2020-02-01";

sub USAGE{
	print(qq{            @{[uc($TFL::PROGNAME)]} ($CurVer)
		            $TFL::AUTHOR

		            DEB package builder for non-compiling languages.

		SYNTAX:     $TFL::PROGNAME [OPTS] CMDS FILES

		OPTS:       --help|-h|-?            - Display this help information.
		            --version|-v            - Output the version datestamp.

		CMDS:       ARCH=STR                - Architecture required by package.
		            BASE=PATH               - Directory for package files.
		            DEPS=STR                - List of dependencies; see below.
		            ESSE=STR                - Whether package is essential.
		            LODE=STR                - Long description for package.
		            NAME=STR                - Name of project to be packaged.
		            PRIO=STR                - Priority of the package.
		            REPO=STR                - Name of the GitHub repository.
		            SECT=STR                - Section assigned to this package.
		            SHDE=STR                - Short description for package.
		            SIZE=INT                - Total installed size, in KiB.
		            VERS=STR                - Version string for the package.

		NOTE:       All CMDS are written in key=value format.

		            The FILES part of the command must consist of absolute
		            paths, and must not only point to the files to add, but
		            also the files for md5sums.

		            Dependencies, via the 'DEPS' key, should be correctly
		            formatted. For example:

		              DEPS='perl (>= v5.22.1), libtfl-perl (>= 2019-05-07)'

		            The longer description for the 'LODE' key, as the rest of
		            the keys, can be a variable assigned to the associated
		            data, for easier building. This inconvenience will be
		            addressed in future versions of $TFL::PROGNAME.
	} =~ tr/\t//dr)
}

while (defined($ARGV[0])){
	if ($ARGV[0] =~ '^(--help|-h|-\?)$'){
		USAGE; exit 0
	}elsif ($ARGV[0] =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit 0
	}elsif ($ARGV[0] =~ '^-.*'){
		FErr(1, __LINE__, "Incorrect argument(s) specified")
	}else{
		last
	}

	shift()
}

DepChk('md5sum', 'dpkg-deb');

FErr(1, __LINE__, "Root access via sudo is required.")
	unless $< == 0 and defined($ENV{SUDO_UID});

my @KeyList = (
	'BASE' 'NAME' 'VERS' 'SECT' 'ESSE' 'DEPS'
	'SIZE' 'SHDE' 'LODE' 'PRIO' 'ARCH' 'REPO'
);

my %Keys;

while (defined($ARGV[0])){
	# Ensure there are arguments left for FILES.
	last() if $ARGV[0] =~ /^\//;

	foreach (@KeyList){
		if (uc(TFL::KeyVal($ARGV[0], 0)) eq $_){
			$Keys{$_} = KeyVal($ARGV[0], 1)
		}
	}

	shift()
}

KeyDef(\%Keys, \@KeyList);

my $Debian = $Keys{BASE} =~ s/\/$//r . '/DEBIAN';
make_path($Debian) unless -d $Debian;
chmod(0755, $Debian); # <-- Required permissions.

{ # Generate the control file.
	open(my $FH, '>', "$Debian/control");
	my $DATA = qq{Package: $Keys{NAME}
		Version: $Keys{VERS}
		Architecture: $Keys{ARCH}
		Essential: $Keys{ESSE}
		Section: $Keys{SECT}
		Priority: $Keys{PRIO}
		Depends: $Keys{DEPS}
		Maintainer: TFL/LL <terminalforlife\@yahoo.com>
		Installed-Size: $Keys{SIZE}
		Description: $Keys{SHDE}
		  $Keys{LODE}
		Homepage: https://github.com/terminalforlife/$Keys{REPO}
	};

	print($FH $DATA =~ tr/\t//dr);
	close($FH)
}

{ # Generate the md5sums file, and copy files over.
	my $Sums = "$Debian/md5sums";
	unlink($Sums) if -f $Sums;
	open(my $FH, '>>', $Sums);

	while ($ARGV[0]){
		if (-f -r $ARGV[0]){
			chomp(my $SUM = `md5sum "$ARGV[0]"`);
			print($FH "$SUM\n");

			my $NewPath = "$Keys{BASE}/" . dirname($ARGV[0]) =~ s/^\///r;
			make_path($NewPath);
			copy($ARGV[0], "$NewPath/");

			#chown(0, 0, "$NewPath/" . basename($ARGV[0]));
			print(
				"chown 0:0 '$Keys{BASE}/" .
				$ARGV[0] =~ s/^\///r . "'\n"
			); # <-- Temporary, sloppy workaround.

			my $Found = 0;
			foreach(@{[split(':', $ENV{PATH})]}){
				$Found++ if $_ eq dirname($ARGV[0])
			}

			chmod(0755, "$NewPath/" . basename($ARGV[0])) if $Found > 0
		}else{
			FErr(1, __LINE__, "File(s) missing or inaccessible.")
		}

		shift()
	}

	close($FH);
}
