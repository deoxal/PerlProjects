#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/lsbins
#------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/lsbins
# Started On        - Thu 25 Apr 14:17:05 BST 2019
# Last Change       - Sat 15 Feb 02:08:52 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#------------------------------------------------------------------------------
# Dependencies:
#
#   liblist-moreutils-perl (>= 0.413-1build1)
#   libtfl-perl (>= 2020-01-03)
#----------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use TFL;
use File::Basename 'basename';
use List::MoreUtils 'uniq';

my $CurVer = "2020-02-15";

sub Usage{
	print(qq{Usage: $TFL::PROGNAME [OPTS] [MATCH]

		  -h, --help               - Display this help information.
		  -v, --version            - Output the version datestamp.
		  -E, --extended-regexp    - Search with extended REGEX.
		  -N, --nodescribe         - Omit the short description.
		  -a, --show-all           - Show alternative descriptions.
		  -i, --ignore-case        - Search case-insensitively.
	} =~ tr/\t//dr)
}

my $NoDescribe = 'false';
my $CaseInsen = 'false';
my $ExtReg = 'false';
my $ShowAll = 'false';

while (defined($ARGV[0])){
	if ($ARGV[0] =~ '^(--help|-h|-\?)$'){
		Usage(1); exit(0)
	}elsif ($ARGV[0] =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit(0)
	}elsif ($ARGV[0] =~ '^(--ignore-case|-i)$'){
		$CaseInsen = 'true'
	}elsif ($ARGV[0] =~ '^(--extended-regexp|-E)$'){
		$ExtReg = 'true'
	}elsif ($ARGV[0] =~ '^(--nodescribe|-N)$'){
		$NoDescribe = 'true'
	}elsif ($ARGV[0] =~ '^(--show-all|-a)$'){
		$ShowAll = 'true'
	}elsif ($ARGV[0] =~ '^-.*'){
		TFL::Err(1, "Unrecognised option(s) specified")
	}else{
		last
	}

	shift()
}

TFL::Err(1, 'Only one MATCH is applicable.') if scalar(@ARGV) > 1;

unless (defined($ARGV[0])){
	if ($ExtReg eq 'true'){
		TFL::Err(1, "Option '--extended-regexp|-E' provided, but missing MATCH.")
	}elsif ($CaseInsen eq 'true'){
		TFL::Err(1, "Option '--ignore-case|-i' provided, but missing MATCH.")
	}
}

# Generate list of `PATH` executable files.
my @Exes;
foreach (split(':', $ENV{PATH})){
	foreach (glob("$_/*")){
		push(@Exes, basename($_)) if -f -r -x
	}
}

@Exes = uniq(sort(@Exes));

#TODO: Would much rather set and concatenate a variable for this, but how?
sub DoMatch{
	return(0) unless defined($ARGV[0]);

	# If a MATCH is provided, check for it, then skip if found.
	if ($CaseInsen eq 'true'){
		return(0) if $_[0] =~ /$ARGV[0]/i;
	}elsif ($ExtReg eq 'true'){
		return(0) if $_[0] =~ /$ARGV[0]/x;
	}elsif ($CaseInsen eq 'true' and $ExtReg eq 'true'){
		return(0) if $_[0] =~ /$ARGV[0]/ix;
	}else{
		return(0) if $_[0] =~ $ARGV[0];
	}

	return(1)
}

if ($NoDescribe ne 'true' and TFL::DepChk(':', 'man') == 0){
	my $OldName = '';
	foreach (`man -f @Exes 2> /dev/null`){
		chomp();
		my $Name = (split(' ', $_))[0];

		# Using `OldName` to avoid alternative descriptions.
		next if $Name eq $OldName and $ShowAll ne 'true';

		my $Desc = s/^.* - //gr;

		# Capitalise the first letter of the description.
		my $FirstChar = substr($Desc, 0, 1);
		my $Remaining = substr($Desc, 1);
		$Desc = ' - ' . uc($FirstChar) . $Remaining;

		next unless DoMatch($Name) == 0;
		printf("%s%s\n", $Name, $Desc);

		$OldName = $Name
	}
}else{
	foreach (@Exes){
		next unless DoMatch($_) == 0;
		printf("%s\n", $_)
	}
}
