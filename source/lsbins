#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/lsbins
#----------------------------------------------------------------------------------
# Project Name      - PerlProjects/source/lsbins
# Started On        - Thu 25 Apr 14:17:05 BST 2019
# Last Change       - Wed 15 Jan 16:25:38 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

use v5.22.1;
use strict;
use warnings;
use autodie;
use File::Basename 'basename';
use TFL; # <-- libtfl-perl (>= 2020-01-02)
use List::MoreUtils 'uniq'; # <-- liblist-moreutils-perl (>= 0.413-1build1)

my $CurVer = "2020-01-15";
my $Progrm = basename($0);

sub Usage{
	my $Info = qq{            @{[uc($Progrm)]} ($CurVer)
		            Written by terminalforlife <terminalforlife\@yahoo.com>

		            A descriptive, searchable overview of PATH executables.

		SYNTAX:     $Progrm [OPTS] [MATCH]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --ignore-case|-i        - Search for MATCH case-insensitively.
		            --extended-regexp|-E    - Search for MATCH with extended REGEX.
		            --nodescribe|-N         - Omit short description for commands.
		            --show-all|-a           - Show alternative short descriptions.

		NOTE:       Where MATCH is a REGEX string for which is searched in the name
		            of the command, program, file, etc. The description is ignored.

		            Typically, executables found within PATH are lowercase, but for
		            other times, the above applicable flags comes into play.
	};

	print($Info =~ tr/\t//dr)
}

my $NoDescribe = 'false';
my $CaseInsen = 'false';
my $ExtReg = 'false';
my $ShowAll = 'false';

while (scalar(@ARGV) > 0){
	my $Arg = $ARGV[0];

	if ($Arg =~ '^(--help|-h|-\?)$'){
		Usage(1); exit(0)
	}elsif ($Arg =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit(0)
	}elsif ($Arg =~ '^(--ignore-case|-i)$'){
		$CaseInsen = 'true'
	}elsif ($Arg =~ '^(--extended-regexp|-E)$'){
		$ExtReg = 'true'
	}elsif ($Arg =~ '^(--nodescribe|-N)$'){
		$NoDescribe = 'true'
	}elsif ($Arg =~ '^(--show-all|-a)$'){
		$ShowAll = 'true'
	}elsif ($Arg =~ '^-.*'){
		TFL::Err(1, "Unrecognised option(s) specified")
	}else{
		last
	}

	shift(@ARGV)
}

TFL::Err(1, 'Only one MATCH is applicable.') if scalar(@ARGV) > 1;

unless (defined($ARGV[0])){
	if ($ExtReg eq 'true'){
		TFL::Err(1, "Option '--extended-regexp|-E' provided, but missing MATCH.")
	}elsif ($CaseInsen eq 'true'){
		TFL::Err(1, "Option '--ignore-case|-i' provided, but missing MATCH.")
	}
}

# Generate list of `PATH` executable files.
my @Exes;
foreach (split(':', $ENV{PATH})){
	foreach (glob("$_/*")){
		push(@Exes, basename($_)) if -f -r -x
	}
}

@Exes = uniq(sort(@Exes));

#TODO: Would much rather set and concatenate a variable for this, but how?
sub DoMatch{
	return(0) unless defined($ARGV[0]);

	# If a MATCH is provided, check for it, then skip if found.
	if ($CaseInsen eq 'true'){
		return(0) if $_[0] =~ /$ARGV[0]/i;
	}elsif ($ExtReg eq 'true'){
		return(0) if $_[0] =~ /$ARGV[0]/x;
	}elsif ($CaseInsen eq 'true' and $ExtReg eq 'true'){
		return(0) if $_[0] =~ /$ARGV[0]/ix;
	}else{
		return(0) if $_[0] =~ $ARGV[0];
	}

	return(1)
}

if ($NoDescribe ne 'true' and TFL::DepChk(':', 'man') == 0){
	my $OldName = '';
	foreach (`man -f @Exes 2> /dev/null`){
		chomp();
		my $Name = (split(' ', $_))[0];

		# Using `OldName` to avoid alternative descriptions.
		next if $Name eq $OldName and $ShowAll ne 'true';

		my $Desc = s/^.* - //gr;

		# Capitalise the first letter of the description.
		my $FirstChar = substr($Desc, 0, 1);
		my $Remaining = substr($Desc, 1);
		$Desc = ' - ' . uc($FirstChar) . $Remaining;

		next unless DoMatch($Name) == 0;
		printf("%s%s\n", $Name, $Desc);

		$OldName = $Name
	}
}else{
	foreach (@Exes){
		next unless DoMatch($_) == 0;
		printf("%s\n", $_)
	}
}
