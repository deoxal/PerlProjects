#!/usr/bin/env perl
#cito M:755 O:0 G:0 T:/usr/bin/get-fma
#----------------------------------------------------------------------------------
# Project Name      - PerlProjects/get-fma
# Started On        - Fri 26 Apr 16:13:18 BST 2019
# Last Change       - Thu  2 Jan 23:06:58 GMT 2020
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

use strict;
use warnings;
use autodie;
use File::Basename 'basename';
use TFL 'Err'; # <-- libtfl-perl (>= 2020-01-02)
use LWP::UserAgent;
use File::Temp 'tempfile';
use List::MoreUtils 'uniq';

my $CurVer = "2020-01-02";
my $Progrm = basename($0);

my $Domain = 'https://freemusicarchive.org';

sub Usage{
	my $INFO = qq{            @{[uc($Progrm)]} ($CurVer)
		            Written by terminalforlife <terminalforlife\@yahoo.com>

		            Perl downloader for MP3s discovered on Free Music Archive.

		SYNTAX:     $Progrm [OPTS] [GENRE] [PAGE]

		OPTS:       --help|-h|-?            - Displays this help information.
		            --version|-v            - Output only the version datestamp.
		            --output-only|-O        - Don't download audio; output only.
		            --name|-n TYPE          - Name TYPE to use for file names.
		            --dest|-D PATH          - Files will be downloaded to PATH.

		NOTE:       Where DEST is the destination for the downloaded audio files.

		            Available TYPEs are 'generic', 'id', and the default, 'title'.

		SITE:       $Domain
	};

	print(split("\t", $INFO))
}

my $Destination = './';
my $NameFormat = "title";
my $OutputOnly = "false";

while ($ARGV[0]){
	my $Arg = $ARGV[0];

	if ($Arg =~ '^(--help|-h|-\?)$'){
		Usage; exit(0)
	}elsif ($Arg =~ '^(--version|-v)$'){
		print("$CurVer\n"); exit(0)
	}elsif ($Arg =~ '^(--name|-n)$'){
		shift(@ARGV);

		Err(1, "Invalid format specified.")
			unless $ARGV[0] =~ '^(title|generic|id|link)$';

		$NameFormat = $ARGV[0]
	}elsif ($Arg =~ '^(--output-only|-O)$'){
		$OutputOnly = 'true'
	}elsif ($Arg =~ '^(--dest|-D)$'){
		shift(@ARGV);

		if (-d $ARGV[0]){
			if ($ARGV[0] !~ '/$'){
				$Destination = $ARGV[0] . '/'
			}else{
				$Destination = $ARGV[0]
			}
		}else{
			Err(1, "Directory not found.")
		}
	}elsif ($Arg =~ '^-'){
		Err(1, "Incorrect argument(s) specified")
	}else{
		last
	}

	shift(@ARGV)
}

unless ($ARGV[0] && $ARGV[1]){
	Err(1, "Both a genre and page number are required.")
}

my @Genres = (
	"blues", "classical", "country", "electronic", "experimental", "folk",
	"hip-hop", "instrumental", "international", "jazz", "novelty", "historic",
	"pop", "rock", "soul-rnb", "spoken"
);

my $UA = LWP::UserAgent->new();
$UA->max_redirect(1);
$UA->protocols_allowed(['http', 'https']);
$UA->agent('Mozilla/5.0');

my $TempFile;
my $ValidGenre = "false";

foreach (@Genres){
	if ($_ eq $ARGV[0]){
		my $Sort = 'sort=track_date_published&d=1&';
		my $Link = "$Domain/genre/$ARGV[0]/?${Sort}page=$ARGV[1]";

		my $FH = File::Temp->new(UNLINK => 0, SUFFIX => '.tmp');
		$TempFile = $FH->filename();
		print($FH $UA->get($Link)->decoded_content());

		$ValidGenre = "true";
		close($FH);
		last
	}
}

Err(1, "Genre not found.") if $ValidGenre eq "false";

open(my $FH, '<', $TempFile);

my ($Track, $Pad, $Title);
my $Count = 0;

while (<$FH>){
	chomp();

	if ($NameFormat eq "title"){
		if ($_ =~ /class="ptxt-track"/ and $_ !~ /class="sortarr-up"/){
			my @TitleLine = split('/', $_);
			$Title = $TitleLine[6] =~ s/(.*">|<$|\s\([iI][dD]\s[0-9]{4}\))//gr
		}
	}

	next unless $_ =~ "$Domain/music/download/";

	my @Line = split(' ');
	my $Link = $Line[1] =~ s/(href=|\")//gr;

	if ($NameFormat eq "id"){
		my $ID = $Link =~ s/^.*\///gr;
		$Track = "$ID";
		print($Track)
	}elsif ($NameFormat eq "title"){
		if(not $Title){
			next
		}else{
			$Track = "${Title}.mp3";
			print($Track)
		}
	}elsif($NameFormat eq "generic"){
		$Count += 1;
		if($Count < 10){$Count = '0' . $Count}
		$Track = "Track_#$Pad$Count.mp3";
		print($Track)
	}

	if($OutputOnly eq "true"){
		print("\n")
	}else{
		open(my $Audio, '>', "$Destination$Track");

		my $Buffer = $UA->get($Link);
		if($Buffer->is_success()){
			print($Audio $Buffer->decoded_content);
			print(" [OK]\n")
		}else{
			unlink("$Destination$Track");
			print(" [ERROR]\n")
		}

		close($Audio)
	}
}

close($FH);
unlink($TempFile)
